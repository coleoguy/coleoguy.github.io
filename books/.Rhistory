foo[7,] <- c(21,15,15, 10, 9, 4)
foo[8,] <- c( 8, 2, 1, 0, 0, 0)
foo[9,] <- c( 1, 3, 0, 0, 0, 0)
View(foo)
foo <- matrix(,10,6)
foo[1,] <- c(20,25,26,17,18,15)
foo[2,] <- c(20,21,20,16,16,10)
foo[4,] <- c(21,15,15, 10, 9, 4)
foo[6,] <- c(13,15,12, 8, 6, 3)
foo[10,]<- c( 0, 0, 0, 0, 0, 0)
foo[3,] <- c(10,19,7,10,5,5)
foo[5,] <- c(11,13,9,7,2,1)
foo[7,] <- c(8,3,1,0,0,0)
foo[8,] <- c( 8, 2, 1, 0, 0, 0)
foo[9,] <- c( 1, 3, 0, 0, 0, 0)
View(foo)
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1, 1.06, 1.1, 1.13, 1.2 1.25, 1.3, 1.5, 1.67, 1.75,2),
z=foo,
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation")
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1, 1.06, 1.1, 1.13, 1.2, 1.25,
1.3, 1.5, 1.67, 1.75,2),
z=foo,
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation")
y=c(1, 1.06, 1.1, 1.13, 1.2, 1.25,
1.3, 1.5, 1.67, 1.75,2)
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1, 1.06, 1.1, 1.13, 1.25,
1.3, 1.5, 1.67, 1.75,2),
z=foo,
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation")
foo <- matrix(,10,6)
foo[1,] <- c(20,25,26,17,18,15)
foo[2,] <- c(20,21,20,16,16,10)
foo[4,] <- c(21,15,15, 10, 9, 4)
foo[6,] <- c(13,15,12, 8, 6, 3)
foo[10,]<- c( 0, 0, 0, 0, 0, 0)
foo[3,] <- c(10,19,7,10,5,5)
foo[5,] <- c(11,13,9,7,2,1)
foo[7,] <- c(8,3,1,0,0,0)
foo[8,] <- c( 8, 2, 1, 0, 0, 0)
foo[9,] <- c( 1, 3, 0, 0, 0, 0)
foo <- t(foo)
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo,
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation")
help("image")
library(viridis)
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo,
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(30))
filled.contour(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo)
foo <- matrix(,10,6)
foo[1,] <- c(20,25,26,17,18,15)
foo[2,] <- c(20,21,20,16,16,10)
foo[4,] <- c(21,15,15, 10, 9, 4)
foo[6,] <- c(13,15,12, 8, 6, 3)
foo[10,]<- c( 0, 0, 0, 0, 0, 0)
foo[3,] <- c(10,19,7,10,5,5)
foo[5,] <- c(11,13,9,7,2,1)
foo[7,] <- c(8,3,1,0,0,0)
foo[8,] <- c( 8, 2, 1, 0, 0, 0)
foo[9,] <- c( 1, 3, 0, 0, 0, 0)
filled.contour(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo)
filled.contour(y=c(0,.001,.025,.05,.075,.1),
x=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo)
filled.contour(#x=c(0,.001,.025,.05,.075,.1),
x=c(.1,.075,.05,.025,.001,.0),
#y=c(1,   1.06, 1.1,  1.13, 1.25,
#     1.3, 1.5,  1.67, 1.75, 2),
y=c(2,   1.75, 1.67,  1.5, 1.3,
1.25, 1.13,  1.1, 1.06, 1),
z=foo)
filled.contour(#x=c(0,.001,.025,.05,.075,.1),
y=c(.1,.075,.05,.025,.001,.0),
#y=c(1,   1.06, 1.1,  1.13, 1.25,
#     1.3, 1.5,  1.67, 1.75, 2),
x=c(2,   1.75, 1.67,  1.5, 1.3,
1.25, 1.13,  1.1, 1.06, 1),
z=t(foo))
filled.contour(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=t(foo))
t(foo)
filled.contour(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=t(foo), col=viridis(30))
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo,
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(30))
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=t(foo),
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(30))
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=t(foo),
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(100))
foo <- matrix(,10,6)
foo[1,] <- c(100,25,26,17,18,15)
foo[2,] <- c(20,21,20,16,16,10)
foo[4,] <- c(21,15,15, 10, 9, 4)
foo[6,] <- c(13,15,12, 8, 6, 3)
foo[10,]<- c( 0, 0, 0, 0, 0, 0)
foo[3,] <- c(10,19,7,10,5,5)
foo[5,] <- c(11,13,9,7,2,1)
foo[7,] <- c(8,3,1,0,0,0)
foo[8,] <- c( 8, 2, 1, 0, 0, 0)
foo[9,] <- c( 1, 3, 0, 0, 0, 0)
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=t(foo),
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(100))
View(foo)
foo <- matrix(,10,6)
foo[1,] <- c(20,25,26,17,18,15)
foo[2,] <- c(20,21,20,16,16,10)
foo[4,] <- c(21,15,15, 10, 9, 4)
foo[6,] <- c(13,15,12, 8, 6, 3)
foo[10,]<- c( 0, 0, 0, 0, 0, 0)
foo[3,] <- c(10,19,7,10,5,5)
foo[5,] <- c(11,13,9,7,2,1)
foo[7,] <- c(8,3,1,0,0,0)
foo[8,] <- c( 8, 2, 1, 0, 0, 0)
foo[9,] <- c( 1, 3, 0, 0, 0, 0)
foo <- foo[10:1,]
foo <- t(foo)
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=t(foo),
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(100))
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo,
xlab = "Sexual Ant. Ratio",
ylab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(100))
image(x=c(0,.001,.025,.05,.075,.1),
y=c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2),
z=foo,
ylab = "Sexual Ant. Ratio",
xlab = "Aneuploidy Rate",
main = "Probability of fixation",
col=viridis(100))
library(fields)
foo <- matrix(,10,6)
foo[1,] <- c(20,25,26,17,18,15)
foo[2,] <- c(20,21,20,16,16,10)
foo[4,] <- c(21,15,15, 10, 9, 4)
foo[6,] <- c(13,15,12, 8, 6, 3)
foo[10,]<- c( 0, 0, 0, 0, 0, 0)
foo[3,] <- c(10,19,7,10,5,5)
foo[5,] <- c(11,13,9,7,2,1)
foo[7,] <- c(8,3,1,0,0,0)
foo[8,] <- c( 8, 2, 1, 0, 0, 0)
foo[9,] <- c( 1, 3, 0, 0, 0, 0)
View(foo)
colnames(foo) <- c(0,.001,.025,.05,.075,.1)
View(foo)
row.names(foo) <- c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2)
View(foo)
row.names(foo) <- c(1,   1.06, 1.1,  1.13, 1.25,
1.3, 1.5,  1.67, 1.75, 2)[10:1]
View(foo)
run.pop <- function(gens = 500, # generations to run
pop = 1000,  # population size
aneuploid.p = 0.04, # rate of aneuploidy in non-recomb Y
avg.recomb=1, # avg number of recomb between A and B
# fitness values in the order
# males   0,0  0,1  1,1
# females 0,0  0,1  1,1
fit.vals = c(1,1.1,1.2,1.2,1.1,1.0)){
# we have to decide how far apart locus 1 and 2 are.
# lets start with the assumption that they are far
# enough apart that on average there is one recombination
# event between them and that actual number is poisson dist.
# this means that ~37% will not have a recombination event
# lets assume that we can ignore double/triple etc
no.recom <- dpois(0,avg.recomb)
# scores the fitness of a diploid genotype
fitness <- function(x){ # x is a genotype
#### we might have recomb Y males
if(1 %in% x[,1]){
# fixed for female benefit allele
if(sum(x[,2]) == 0) fit <- fit.vals[1]
# het
if(sum(x[,2]) == 1) fit <- fit.vals[2]
# fixed for male benefit allele
if(sum(x[,2]) == 2) fit <- fit.vals[3]
#### you might have non-recomb Y male
} else if(2 %in% x[,1]){
# fixed for female benefit allele
if(sum(x[,2]) == 0) fit <- fit.vals[1]-aneuploid.p
# het
if(sum(x[,2]) == 1) fit <- fit.vals[2]-aneuploid.p
# fixed for male benefit allele
if(sum(x[,2]) == 2) fit <- fit.vals[3]-aneuploid.p
#### or maybe you are a female
} else {
# fixed for female benefit allele
if(sum(x[,2]) == 0) fit <- fit.vals[4]
# het
if(sum(x[,2]) == 1) fit <- fit.vals[5]
# fixed for male benefit allele
if(sum(x[,2]) == 2) fit <- fit.vals[6]
}
return(fit)
}
# performs meiosis on a diploid
getChrom <- function(x){
if(2 %in% x[,1]) return(x[sample(1:2,1),])
if(runif(1,0,1) > no.recom){
return(
# gotta be a more elegant way than this to grab these out need a reverse
# diag function maybe hack lower.tri
sample(list(diag(x), c(x[2,1],x[1,2])), 1)[[1]]
)
} else {
return(x[sample(1:2,1),])
}
}
# makes diploids from gametes
joinGametes <- function(x,y){
rbind(x,y)
}
# allows me to monitor loci
genotyper <- function(x,col){
return(sum(x[,col]))
}
# takes the popualtion through a generation
generation <- function(x, y){ # x is males, y is females
# score everyones fitness
fit.M <- vapply(x, fitness, FUN.VALUE = 1)
fit.F <- vapply(y, fitness, FUN.VALUE = 1)
# select parents based on fitness
dads <- x[sample(1:length(x), size=pop, replace=T, prob=fit.M)]
moms <- y[sample(1:length(y), size=pop, replace=T, prob=fit.F)]
# make gamete pools
eggs <- lapply(moms, getChrom)
sperm <- lapply(dads, getChrom)
t.popF <- t.popM <- list(length=(pop/2))
m.count <- f.count <- 1
for(i in 1:pop){
foo <- joinGametes(sperm[[i]], eggs[[i]])
if(1 %in% foo[,1] | 2 %in% foo[,1]){
t.popM[[m.count]] <- foo
m.count <- m.count + 1
} else {
t.popF[[f.count]] <- foo
f.count <- f.count + 1
}
}
return(list(t.popM, t.popF))
}
popF <- rep(list(matrix(c(0,0,1,0),2,2)), pop/2)
popM <- rep(list(matrix(c(1,0,1,0),2,2)), pop/2)
m.all.freq <- f.B.freq <- m.B.freq <- vector(length=1000)
for(i in 1:gens){
gen <- generation(popM, popF)
popM <- gen[[1]]
popF <- gen[[2]]
# at generation 10 we introduce our mutated Y
if(i==10) popM[[1]][1,1:2] <- c(2,1)
m.all.freq[i] <- mean(vapply(popM, genotyper, FUN.VALUE = 1, col=1))
m.B.freq[i] <- mean(vapply(popM, genotyper, FUN.VALUE = 1, col=2))
f.B.freq[i] <- mean(vapply(popF, genotyper, FUN.VALUE = 1, col=2))
if(i > 10 & m.all.freq[i]==1) return("lost")
if(i > 10 & m.all.freq[i]==2) return("fixed")
if(i == gens) return("seg")
#cat(paste("\ngeneration", i, "mean of locus 1 in males",
#          mean(vapply(popM, genotyper, FUN.VALUE = 1, col=1))))
}
}
require(compiler)
enableJIT(3)
antag.rng <- list(c(1.00, 1.03,  1.06, 1.06, 1.03,  1.00),
c(1.00, 1.05,  1.10, 1.10, 1.05,  1.00),
c(1.00, 1.06,  1.13, 1.13, 1.06,  1.00),
c(1.00, 1.19,  1.38, 1.38, 1.19,  1.00),
c(1.00, 1.32,  1.63, 1.63, 1.32,  1.00))
aneup.rng <- c(0, .001, .025, .05, .075,  .1)
results <- matrix(,5,6)
antag.rng <- list(c(1, 1,  1, 1, 1,  1),
c(1.00, 1.05,  1.10, 1.10, 1.05,  1.00),
c(1.00, 1.06,  1.13, 1.13, 1.06,  1.00),
c(1.00, 1.19,  1.38, 1.38, 1.19,  1.00),
c(1.00, 1.32,  1.63, 1.63, 1.32,  1.00))
View(foo)
seq(from=1, to=1.5 by=.05)
help(seq)
seq(from=1, to=1.5, by=.05)
antag.rng <- list(c(1.00, 1.25,  1.50, 1.50, 1.25,  1.00),
c(1.00, 1.225,  1.45, 1.45, 1.225,  1.00),
c(1.00, 1.20, 1.40, 1.40, 1.20, 1.00),
c(1.00, 1.175,  1.35, 1.35, 1.175,  1.00),
c(1.00, 1.15, 1.30, 1.30, 1.15, 1.00),
c(1.00, 1.125,  1.25, 1.25, 1.125,  1.00),
c(1.00, 1.10,  1.20, 1.20, 1.10,  1.00),
c(1.00, 1.075,  1.15, 1.15, 1.075,  1.00),
c(1.00, 1.05,  1.10, 1.10, 1.05,  1.00),
c(1.00, 1.025,  1.05, 1.05, 1.025,  1.00),
c(1.00, 1.00,  1.00, 1.00, 1.00,  1.00))
View(foo)
colnames(foo) <- c(0,.001,.01,.02,.03,.04, .05, .06,.07,.08, .09)
aneup.rng <- c(0,.001,.01,.02,.03,.04, .05, .06,.07,.08, .09)
seq(from=1, to=1.5, by=.05)
results <- matrix(,11,11)
colnames(results) <- aneup.rng
row.names(results) <- seq(from=1, to=1.5, by=.05)
View(results)
colnames(results) <- aneup.rng
row.names(results) <- seq(from=1.5, to=1, by=.05)
View(results)
row.names(results) <- seq(from=1.5, to=1, by=-.05)
View(results)
antag.rng[[1]]
View(foo)
View(results)
run.pop <- function(gens = 500, # generations to run
pop = 1000,  # population size
aneuploid.p = 0.04, # rate of aneuploidy in non-recomb Y
avg.recomb=1, # avg number of recomb between A and B
# fitness values in the order
# males   0,0  0,1  1,1
# females 0,0  0,1  1,1
fit.vals = c(1,1.1,1.2,1.2,1.1,1.0)){
# we have to decide how far apart locus 1 and 2 are.
# lets start with the assumption that they are far
# enough apart that on average there is one recombination
# event between them and that actual number is poisson dist.
# this means that ~37% will not have a recombination event
# lets assume that we can ignore double/triple etc
no.recom <- dpois(0,avg.recomb)
# scores the fitness of a diploid genotype
fitness <- function(x){ # x is a genotype
#### we might have recomb Y males
if(1 %in% x[,1]){
# fixed for female benefit allele
if(sum(x[,2]) == 0) fit <- fit.vals[1]
# het
if(sum(x[,2]) == 1) fit <- fit.vals[2]
# fixed for male benefit allele
if(sum(x[,2]) == 2) fit <- fit.vals[3]
#### you might have non-recomb Y male
} else if(2 %in% x[,1]){
# fixed for female benefit allele
if(sum(x[,2]) == 0) fit <- fit.vals[1]-aneuploid.p
# het
if(sum(x[,2]) == 1) fit <- fit.vals[2]-aneuploid.p
# fixed for male benefit allele
if(sum(x[,2]) == 2) fit <- fit.vals[3]-aneuploid.p
#### or maybe you are a female
} else {
# fixed for female benefit allele
if(sum(x[,2]) == 0) fit <- fit.vals[4]
# het
if(sum(x[,2]) == 1) fit <- fit.vals[5]
# fixed for male benefit allele
if(sum(x[,2]) == 2) fit <- fit.vals[6]
}
return(fit)
}
# performs meiosis on a diploid
getChrom <- function(x){
if(2 %in% x[,1]) return(x[sample(1:2,1),])
if(runif(1,0,1) > no.recom){
return(
# gotta be a more elegant way than this to grab these out need a reverse
# diag function maybe hack lower.tri
sample(list(diag(x), c(x[2,1],x[1,2])), 1)[[1]]
)
} else {
return(x[sample(1:2,1),])
}
}
# makes diploids from gametes
joinGametes <- function(x,y){
rbind(x,y)
}
# allows me to monitor loci
genotyper <- function(x,col){
return(sum(x[,col]))
}
# takes the popualtion through a generation
generation <- function(x, y){ # x is males, y is females
# score everyones fitness
fit.M <- vapply(x, fitness, FUN.VALUE = 1)
fit.F <- vapply(y, fitness, FUN.VALUE = 1)
# select parents based on fitness
dads <- x[sample(1:length(x), size=pop, replace=T, prob=fit.M)]
moms <- y[sample(1:length(y), size=pop, replace=T, prob=fit.F)]
# make gamete pools
eggs <- lapply(moms, getChrom)
sperm <- lapply(dads, getChrom)
t.popF <- t.popM <- list(length=(pop/2))
m.count <- f.count <- 1
for(i in 1:pop){
foo <- joinGametes(sperm[[i]], eggs[[i]])
if(1 %in% foo[,1] | 2 %in% foo[,1]){
t.popM[[m.count]] <- foo
m.count <- m.count + 1
} else {
t.popF[[f.count]] <- foo
f.count <- f.count + 1
}
}
return(list(t.popM, t.popF))
}
popF <- rep(list(matrix(c(0,0,1,0),2,2)), pop/2)
popM <- rep(list(matrix(c(1,0,1,0),2,2)), pop/2)
m.all.freq <- f.B.freq <- m.B.freq <- vector(length=1000)
for(i in 1:gens){
gen <- generation(popM, popF)
popM <- gen[[1]]
popF <- gen[[2]]
# at generation 10 we introduce our mutated Y
if(i==10) popM[[1]][1,1:2] <- c(2,1)
m.all.freq[i] <- mean(vapply(popM, genotyper, FUN.VALUE = 1, col=1))
m.B.freq[i] <- mean(vapply(popM, genotyper, FUN.VALUE = 1, col=2))
f.B.freq[i] <- mean(vapply(popF, genotyper, FUN.VALUE = 1, col=2))
if(i > 10 & m.all.freq[i]==1) return("lost")
if(i > 10 & m.all.freq[i]==2) return("fixed")
if(i == gens) return("seg")
#cat(paste("\ngeneration", i, "mean of locus 1 in males",
#          mean(vapply(popM, genotyper, FUN.VALUE = 1, col=1))))
}
}
require(compiler)
enableJIT(3)
antag.rng <- list(c(1.00, 1.25,  1.50, 1.50, 1.25,  1.00),
c(1.00, 1.225,  1.45, 1.45, 1.225,  1.00),
c(1.00, 1.20, 1.40, 1.40, 1.20, 1.00),
c(1.00, 1.175,  1.35, 1.35, 1.175,  1.00),
c(1.00, 1.15, 1.30, 1.30, 1.15, 1.00),
c(1.00, 1.125,  1.25, 1.25, 1.125,  1.00),
c(1.00, 1.10,  1.20, 1.20, 1.10,  1.00),
c(1.00, 1.075,  1.15, 1.15, 1.075,  1.00),
c(1.00, 1.05,  1.10, 1.10, 1.05,  1.00),
c(1.00, 1.025,  1.05, 1.05, 1.025,  1.00),
c(1.00, 1.00,  1.00, 1.00, 1.00,  1.00))
aneup.rng <- c(0,.001,.01,.02,.03,.04, .05, .06,.07,.08, .09)
results <- matrix(,11,11)
colnames(results) <- aneup.rng
row.names(results) <- seq(from=1.5, to=1, by=-.05)
for(j in 1:11){       # rows for antag.rng
for(k in 1:6){     # columns for aneup.rng
t.res <- vector()
cat(paste("row", j, "trial started"))
for(i in 1:2){ # iterations for trials
t.res[i] <- run.pop(aneuploid.p=aneup.rng[k],
fit.vals = antag.rng[[j]])
if(i/10 == round(i/10)) cat(".")
}
results[j,k] <- sum(t.res=="fixed")/100
cat("trial done\n")
}
}
View(results)
View(results)
results
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/stebbins")
