}
# this function returns possible
# rates for a sampled branch
getRates <- function(tree = NULL, edge = NULL, rate.classes = NULL){
# this gets the local rates
local.rates <- getLocalRates(tree, edge, rate.classes)
# this gets the intersection of possible rates and
# returns the numeric that describes the rate class
poss.rates <- getPossiRates(local.rates, rate.classes)
return(poss.rates)
}
getLocalRates <- function(tree = NULL, edge = NULL, rate.classes){
# get parent edge
p.edge <- which(tree$edge[, 2] == tree$edge[edge, 1])
# get daughter edge(s)
d.edges <- which(tree$edge[, 1] == tree$edge[edge, 2])
# if the branch has no parent we set it to the ML rate
if(length(p.edge) == 0){
rates <- median(1:rate.classes)
}else{
# get the rate of the parent edge
rates <- tree$rates[p.edge]
}
# check to see if the branch has daughters
if(length(d.edges) != 0){
# collect the daugter rates
rates <- c(rates, tree$rates[d.edges])
}
return(unique(rates))
}
getPossiRates <- function(local.rates = NULL, rate.classes = NULL){
x <- c(-1, 0, 1)
rate.mat <- as.data.frame(matrix(NA, 0, rate.classes))
for(i in 1:length(local.rates)){
z <- local.rates[i] + x
z <- z[z > 0 & z <= rate.classes]
rate.mat[i, z] <- 1
}
poss.rates <- as.numeric(which(colSums(rate.mat) == nrow(rate.mat)))
if(length(poss.rates) > 1){
poss.rates <- sample(poss.rates, 1)
}
return(poss.rates)
}
plotRateTree <- function(tree, rates,
scaled = F,
cols = NULL, bg = "white",
edge.width){
if(scaled){
tree$edge.length <- tree$edge.length * tree$rates
}
class(tree) <- "phylo"
if(is.null(cols)){
cols <- heat.colors(rates)[rates:1]
cols[median(1:rates)] <- "darkgray"
}
if(bg != "white"){
par(bg=bg)
}
plot(tree,
show.tip.label = F,
edge.color = cols[as.factor(tree$rates)],
edge.width = edge.width)
}
rates <- c(seq(from = bot,
to = 1,
length.out = steps+1),
seq(from = 1,
to = top,
length.out = steps+1)[-1])
rates
step = .2
# set rate classes
steps <- floor(rate.classes/2)
bot <- 1/(1 + steps * step)
top <- 1 + steps * step
rate.classes
# set rate classes
steps <- floor(rate.classes/2)
bot <- 1/(1 + steps * step)
top <- 1 + steps * step
rates <- c(seq(from = bot,
to = 1,
length.out = steps+1),
seq(from = 1,
to = top,
length.out = steps+1)[-1])
step = .5
step = .5
# set rate classes
steps <- floor(rate.classes/2)
bot <- 1/(1 + steps * step)
top <- 1 + steps * step
rates <- c(seq(from = bot,
to = 1,
length.out = steps+1),
seq(from = 1,
to = top,
length.out = steps+1)[-1])
rates
10*.28
10*3.5
source('~/Desktop/Dropbox/gitrepos/TreePainter/R/functions.R')
plotRateTree(tree = fit[[1]],
rates = 3,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
fit <- treePaintR(tree = trees[[100]],
tip_states = traits[[100]],
qmat = qmat,
iter = 7000,
rate.classes = 3,
step = .99)
plotRateTree(tree = fit[[1]],
rates = 3,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
plot(fit$lk.trace, type = "l",
ylab = "lnLik",
xlab = "generation")
fit <- treePaintR(tree = trees[[100]],
tip_states = traits[[100]],
qmat = qmat,
iter = 7000,
rate.classes = 3,
step = 10)
plotRateTree(tree = fit[[1]],
rates = 3,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
plot(fit$lk.trace, type = "l",
ylab = "lnLik",
xlab = "generation")
fit <- treePaintR(tree = trees[[100]],
tip_states = traits[[100]],
qmat = qmat,
iter = 7000,
rate.classes = 9,
step = 9)
plotRateTree(tree = fit[[1]],
rates = 3,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
fit <- treePaintR(tree = trees[[100]],
tip_states = traits[[100]],
qmat = qmat,
iter = 7000,
rate.classes = 9,
step = 9)
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
plot(fit$lk.trace, type = "l",
ylab = "lnLik",
xlab = "generation")
fit <- treePaintR(tree = trees[[100]],
tip_states = traits[[100]],
qmat = qmat,
iter = 12000,
rate.classes = 9,
step = 9)
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
fit <- treePaintR(tree = trees[[100]],
tip_states = traits[[100]],
qmat = qmat,
iter = 12000,
rate.classes = 9,
step = 9)
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
plot(fit$lk.trace, type = "l",
ylab = "lnLik",
xlab = "generation")
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
source('~/Desktop/Dropbox/gitrepos/TreePainter/R/functions.R')
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
par(bg)
par()
source('~/Desktop/Dropbox/gitrepos/TreePainter/R/functions.R')
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
source('~/Desktop/Dropbox/gitrepos/TreePainter/R/functions.R')
plotRateTree(tree = fit[[1]],
rates = 9,
scaled = F,
cols=NULL,
bg="lightgray", edge.width = 1)
plot(fit$lk.trace, type = "l",
ylab = "lnLik",
xlab = "generation")
groups <- as.factor(sample(c("A","B"), 100, replace = T))
groups
as.numeric(groups)
group.effect <- groups
group.effect[group.effect==2] <- 3
group.effect <- as.numeric(groups)
group.effect[group.effect==2] <- 3
group.effect[group.effect==1] <- 0
group.effect
tl <- rnorm(100, mean=3, sd=.5) + rnorm(100, mean= group.effect, sd=.5)
boxplot(tl~groups)
tl <- rnorm(100, mean=2, sd=.5) + rnorm(100, mean= group.effect, sd=.5)
boxplot(tl~groups)
fit <- anova(lm(tl~groups))
summary(fit)
fit
fit <- lm(tl~groups)
summary(fit)
group.effect <- as.numeric(groups)
group.effect[group.effect==2] <- .5
group.effect[group.effect==1] <- 0
tl <- rnorm(100, mean=2, sd=.5) + rnorm(100, mean= group.effect, sd=.5)
boxplot(tl~groups)
anova(lm(tl~groups))
tl <- rnorm(100, mean=2, sd=.8) + rnorm(100, mean= group.effect, sd=.8)
boxplot(tl~groups)
anova(lm(tl~groups))
fit <- lm(tl~groups)
summary(fit)
groups <- as.factor(sample(c("A","B"), 100, replace = T))
group.effect <- as.numeric(groups)
group.effect[group.effect==2] <- 3
group.effect[group.effect==1] <- 0
temp <- runif(100, -5, 5)
groups <- as.factor(sample(c("A","B"), 100, replace = T))
group.effect <- as.numeric(groups)
group.effect[group.effect==2] <- 3
group.effect[group.effect==1] <- 0
temp <- runif(100, -5, 5)
tl <- rnorm(100, mean=2, sd = .8) +
rnorm(100, mean=temp, sd = 1) +
rnorm(100, mean= group.effect, sd=.8)
plot(tl ~ temp)
groups
as.numeric(groups)
c("blue", "red")[1]
c("blue", "red")[2]
c("blue", "red")[c(1,1,1,2)]
plot(tl ~ temp, col= c("blue", "red")[as.numeric(groups)], pch=16)
fit <- lme(tl ~ temp, random = ~1|groups)
library(nlme)
fit <- lme(tl ~ temp, random = ~1|groups)
summary(fit)
fit <- glm(tl ~ temp)
summary(fit)
fit <- glm(tl ~ temp + groups)
summary(fit)
rnorm(100, mean= group.effect, sd=.8)
hist(rnorm(100, mean= group.effect, sd=.8))
log(.000000000000000000000000001)
log(.000000000000000000000000000000000000000000000000000000000000000001)
log(.00000000000000000000000000000000000000001)
log(.00000001)
log(.001)
log(.1)
log(1)
log(5)
14768/2
data(iris)
head(iros)
head(iris)
head(iris)
knitr::opts_chunk$set(echo = TRUE)
pca <- prcomp(iris[,1:4])
x <- rnrom(100, mean=2)
x <- rnorm(100, mean=2)
y <- rnorm(100, mean=-1*x)
plot(x~y)
library(FactoMineR)
pcs <- PCA(cbind(x,y), plot=T)
pcs <- PCA(cbind(x,y), graph=T)
data("children")
View(children)
data("campers")
data("camping")
data("health")
View(health)
fit <- PCA(health, graph=TRUE)
colnames(health)
fit <- PCA(health[,1:115], graph=TRUE)
fit$eig
eig.val <- fit$eig
barplot(eig.val[, 2],
names.arg = 1:nrow(eig.val),
main = "Variances Explained by PCs (%)",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
View(eig.val)
barplot(eig.val[, 3],
names.arg = 1:nrow(eig.val),
main = "Variances Explained by PCs (%)",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
14*22
x <- rnorm(100)
x <- rnorm(100)
y <- rnorm(100, mean=x)
plot(y~x)
summary(lm(y~x))
barplot(eig.val[, 3],
names.arg = 1:nrow(eig.val),
main = "Variances Explained by PCs (%)",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
barplot(eig.val[, 2],
names.arg = 1:nrow(eig.val),
main = "Variances Explained by PCs (%)",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
eig.val[, 2]
View(eig.val)
binom.test(0, 8, .5)
x <- 1:2
sample(x, 8, replace = T)
x <- 1:2
foo <- sum(sample(x, 8, replace = T)==1)
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo=0)
sum(foo=8)
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo=0)
sum(foo=8)
hist(foo)
foo=0
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
x <- 1:2
foo <- c()
for(i in 1:10000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
x <- 1:2
foo <- c()
for(i in 1:100000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
sum(foo==0)
sum(foo==8)
416/100000
396/100000
.00396+.00416
x <- 1:2
foo <- c()
for(i in 1:1000000){
foo[i] <- sum(sample(x, 8, replace = T)==1)
}
(sum(foo==0) + sum(foo==8))/1000000
binom.test(0, 8, .5)
binom.test(0, 32, .25)
x <- 1:4
sample(x, 32, replace = T)
sample(x, 32, replace = T)
unique(sample(x, 32, replace = T))
sum(unique(sample(x, 32, replace = T)))
sum(unique(sample(x, 32, replace = T)))==10
foo <- c()
for(i in 1:1000000){
foo[i] <- sum(unique(sample(x, 32, replace = T)))==10
}
sum(foo)/1000000
1-sum(foo)/1000000
x <- 1:4
foo <- c()
for(i in 1:1000000){
foo[i] <- sum(unique(sample(x, 32, replace = T)))==10
}
1-sum(foo)/1000000
binom.test(0, 32, .25)
sum(foo)/1000000
binom.test(0, 10, .5)
binom.test(0, 12, .5)
x <- 1:2
foo <- c()
for(i in 1:1000000){
foo[i] <- sum(unique(sample(x, 8, replace = T)))==3
}
sum(foo)/1000000
x <- 1:2
foo <- c()
for(i in 1:1000000){
foo[i] <- sum(unique(sample(x, 8, replace = T)))==3
}
sum(foo)/1000000
x <- 1:2
foo <- c()
for(i in 1:1000000){
foo[i] <- sum(unique(sample(x, 10, replace = T)))==3
}
sum(foo)/1000000
x <- 1:2
foo <- c()
for(i in 1:1000000){
foo[i] <- sum(unique(sample(x, 12, replace = T)))==3
}
sum(foo)/1000000
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/final.project")
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/final.project")
foo <- read.csv("gnatocerus.csv")
plot(foo$horns~foo$body)
View(foo)
foo <- read.csv("gnatocerus.csv")
View(foo)
foo <- read.csv("newts.male.csv")
plot(foo$numberofoffspring~foo$svl)
cor.test(foo$numberofoffspring~foo$svl)
cor.test(foo$numberofoffspring,foo$svl)
plot(foo$mass~foo$numberofoffspring)
cor.test(foo$mass~foo$numberofoffspring)
cor.test(foo$mass,foo$numberofoffspring)
sumary(lm(foo$mass~foo$numberofoffspring))
summary(lm(foo$mass~foo$numberofoffspring))
View(foo)
plot(foo$numberofoffspring~foo$numberofmates)
summary(lm(foo$numberofoffspring~foo$mass+foo$numberofmates))
TukeyHSD(aov(foo$numberofoffspring~foo$numberofmates))
TukeyHSD(aov(foo$numberofoffspring~as.factor(foo$numberofmates)))
View(foo)
foo <- read.csv("newts.male.csv")
plot(foo$numberofoffspring~foo$numberofmates)
TukeyHSD(aov(foo$numberofoffspring~as.factor(foo$numberofmates)))
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/review files")
foo <- read.csv("mcmc.log.csv")
foo2 <- read.csv("mcmc.log2.csv")
plot(foo$likelihood)
plot(foo2$likelihood)
