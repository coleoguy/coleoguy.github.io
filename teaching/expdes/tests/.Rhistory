angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
pvals[i] <- t.test(angus, wagyu)$p.value
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
pvals[i] <- t.test(angus, wagyu)$p.value
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
pvals[i] <- t.test(angus, wagyu)$p.value
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
pvals[i] <- t.test(angus, wagyu)$p.value
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
pvals[i] <- t.test(angus, wagyu)$p.value
}
sum(pvals <= 0.05)
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
pvals <- c()
for(i in 1:1000){
angus <- rnorm(100, mean = 140, sd=10)
wagyu <- rnorm(100, mean = 140, sd=10)
if(mean(wagyu) > mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="g")$p.value
}
if(mean(wagyu) < mean(angus)){
pvals[i] <- t.test(wagyu, angus, alternative="l")$p.value
}
}
sum(pvals <= 0.05)
t.test(wagyu, angus)
##Sean Chien
##Keeping sequences that have chromosome number data
## keeping the species with exactly the same name
## if there is only one genus in the sequence, keep it, even it doesnt have chromosome data
library(seqinr)
setwd("~/Desktop/sean")
chromo<- read.csv("coleo-2022-10-07.csv")
chromo<- read.csv("coleo-2022-10-07.csv")
seq<-read.fasta('scarab 16s.fasta')
chromo$species
names(seq)
#change the chromosome data species neame to genus_species
for (i in 1:length(chromo$species)){
chromo$species[i]<-paste(strsplit(chromo$species[i], split= ' ', fixed = T)[[1]][1:2], collapse='_')
}
chromo$species
for (k in 1:length(chromo$species)){
chromo$species[k]<-strsplit(chromo$species[k],split = ".", fixed = T)[[1]][1]
}
otus <- names(seq)
otus <- names(seq)
exmatches<-c()
genusdata<-c()
genus<-c()
for (j in 1:length(otus)){
if (otus[j] %in% chromo$species){
exmatches <- c(exmatches, otus[j])
genus <- c(genus, strsplit(otus[j], split = "_", fixed = T)[[1]][1])
}
else
if (strsplit(otus[j], split = "_", fixed = T)[[1]][1] %in% strsplit(chromo$species, split = "_", fixed = T)[[1]][1] & !strsplit(otus[j], split = "_", fixed = T)[[1]][1] %in% genus){
exmatches<-c(exmatches, otus[j])
genus<-c(genus, strsplit(otus[j], split = "_", fixed = T)[[1]][1])
}
}
match.seq<-seq[list]
seq[exmatches]
match.seq<-seq[exmatches]
write.fasta(match.seq,, names = otus, file.out =  "test.fasta")
names(match.seq)
##Sean Chien
##Keeping sequences that have chromosome number data
## keeping the species with exactly the same name
## if there is only one genus in the sequence, keep it, even it doesnt have chromosome data
library(seqinr)
chromo<- read.csv("coleo-2022-10-07.csv")
seq<-read.fasta('scarab 16s.fasta')
chromo$species
names(seq)
#change the chromosome data species neame to genus_species
for (i in 1:length(chromo$species)){
chromo$species[i]<-paste(strsplit(chromo$species[i], split= ' ', fixed = T)[[1]][1:2], collapse='_')
}
for (k in 1:length(chromo$species)){
chromo$species[k]<-strsplit(chromo$species[k],split = ".", fixed = T)[[1]][1]
}
exmatches <- c()
genusmatches <- c()
y <- 1
j <- 1
otus[j]
names(seq)[j]
chromo$species
names(seq)[j] %in% chromo$species
j <- 2
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
j <- j + 1
names(seq)[j] %in% chromo$species
exmatches <- c(exmatches, otus[j])
exmatches <- c()
for (j in 1:length(seq)){
if (names(seq)[j] %in% chromo$species){
exmatches <- c(exmatches, names(seq)[j])
}
}
setwd("~/Desktop")
grades <- read.csv("midterm.csv",header=1)
par(mfcol=c(1,2))
hist(grades$Midterm,
breaks=24,
xlim=c(30,110),
xaxt="n",
main = "Midterm grades",
xlab = "score",
cex.axis=.8)
axis(side=1, at=seq(30,110, by=20), labels=seq(30,110, by=20))
abline(v=81,col="red",lty=2,lwd=2)
abline(v=91,col="dark green",lty=2,lwd=2)
abline(v=100,col="gold",lty=2,lwd=2)
avgs <- rowSums(grades)/140
hist(avgs*100,
breaks=22,
xlim=c(30,110),
xaxt="n",
main = "Class Averages",
xlab = "score",
cex.axis=.8)
axis(side=1, at=seq(30,110, by=20), labels=seq(30,110, by=20))
abline(v=81,col="red",lty=2,lwd=2)
abline(v=91,col="dark green",lty=2,lwd=2)
abline(v=100,col="gold",lty=2,lwd=2)
strsplit(names(seq)[i], split = "_", fixed = T)[[1]][1]
strsplit(names(seq)[i], split = "_", fixed = T)
strsplit(names(seq)[i], split = "_", fixed = T)[[1]][1]
gen <- c()
for(i in 1:length(seq)){
gen[i] <- strsplit(names(seq)[i], split = "_", fixed = T)[[1]][1]
}
matchedgen <- c()
for(i in 1:length(exmatches)){
matchedgen[i] <- strsplit(exmatches[i], split = "_", fixed = T)[[1]][1]
}
matchedgen <- unique(matchedgen)
unmatchedgen <- gen %in% matchedgen
unmatchedgen <- ! gen %in% matchedgen
neededgenera <- unique(gen[unmatchedgen])
View(chromo)
strsplit(chromo$species[i], split = "_", fixed = T)[[1]][1]
chromgen <- c()
for(i in 1:nrow(chromo)){
chromgen[i] <- strsplit(chromo$species[i], split = "_", fixed = T)[[1]][1]
}
neededgenera %in% chromgen
neededgenera[neededgenera %in% chromgen]
genuslevelmatches <- match.seq<-seq[exmatches]
##Sean Chien
##Keeping sequences that have chromosome number data
## keeping the species with exactly the same name
## if there is only one genus in the sequence, keep it, even it doesnt have chromosome data
library(seqinr)
chromo<- read.csv("coleo-2022-10-07.csv")
seq<-read.fasta('scarab 16s.fasta')
setwd("~/Desktop/sean")
chromo<- read.csv("coleo-2022-10-07.csv")
seq<-read.fasta('scarab 16s.fasta')
chromo$species
names(seq)
#change the chromosome data species neame to genus_species
for (i in 1:length(chromo$species)){
chromo$species[i]<-paste(strsplit(chromo$species[i], split= ' ', fixed = T)[[1]][1:2], collapse='_')
}
for (k in 1:length(chromo$species)){
chromo$species[k]<-strsplit(chromo$species[k],split = ".", fixed = T)[[1]][1]
}
# first find all the perfect matches
exmatches <- c()
for (j in 1:length(seq)){
if (names(seq)[j] %in% chromo$species){
exmatches <- c(exmatches, names(seq)[j])
}
}
# lets get a vector of genera
# first in sequences then in the chrom data
gen <- c()
for(i in 1:length(seq)){
gen[i] <- strsplit(names(seq)[i], split = "_", fixed = T)[[1]][1]
}
chromgen <- c()
for(i in 1:nrow(chromo)){
chromgen[i] <- strsplit(chromo$species[i], split = "_", fixed = T)[[1]][1]
}
# lets get a vector of genera that have species level matches
matchedgen <- c()
for(i in 1:length(exmatches)){
matchedgen[i] <- strsplit(exmatches[i], split = "_", fixed = T)[[1]][1]
}
matchedgen <- unique(matchedgen)
# now we have here a T/F vector to say whether a sequence has been
# matched at all we use this to make a vector of genera to look for in
# the chromosome data
unmatchedgen <- ! gen %in% matchedgen
neededgenera <- unique(gen[unmatchedgen])
neededgenera[neededgenera %in% chromgen]
neededgenera <- neededgenera[neededgenera %in% chromgen]
i<- 1
neededgenera[i]
names(seq)
gen %in% neededgenera[i]
which(gen %in% neededgenera[i])
neededgenera[i]
which(gen %in% neededgenera[i])
hit <- which(gen %in% neededgenera[i])
if(length(hit)>1){
hit <- sample(hit, 1)
}
names(seq)[hit]
curgen <- neededgenera[i]
genhit <- c()
for(i in 1:length(neededgenera)){
curgen <- neededgenera[i]
hit <- which(gen %in% curgen)
if(length(hit)>1){
hit <- sample(hit, 1)
}
genhit[i] <- curgen
names(seq)[hit] <- curgen
}
prnued.seq <- seq[names(seq) %in% c(exmatches, genhit)]
write.fasta(pruned.seq, names = otus, file.out =  "test.fasta")
prnued.seq <- seq[names(seq) %in% c(exmatches, genhit)]
write.fasta(pruned.seq, names = otus, file.out =  "test.fasta")
pruned.seq <- seq[names(seq) %in% c(exmatches, genhit)]
write.fasta(pruned.seq, names = otus, file.out =  "test.fasta")
write.fasta(pruned.seq, names = names(pruned.seq), file.out =  "test.fasta")
475-340
459-269
dat3 <- matrix(c(135,340,190,269), 2, 2)
chisq.test(dat3)
library(evobiR)
Pfsa
data("chickwts")
aov(weight~feed, data=chickwts)
fit <- aov(weight~feed, data=chickwts)
summary(fit)
TukeyHSD(fit)
summary(fit)
fit <- lm(weight~feed, data=chickwts)
summary(fit)
fit <- aov(weight~feed, data=chickwts)
summary(fit)
data("chickwts")
fit <- aov(weight~feed, data=chickwts)
summary(fit)
z <- chickwts
z$weight <- sample(z$weight)
fit <- aov(weight~feed, data=chickwts)
summary(fit)
data("chickwts")
z <- chickwts
z$weight <- sample(z$weight)
fit <- aov(weight~feed, data=z)
summary(fit)
data("chickwts")
fit <- aov(weight~feed, data=chickwts)
TukeyHSD(fit)
setwd("~/Desktop/github/coleoguy.github.io/teaching/expdes/tests")
# Question 19 and 21
crickets <- read.csv("crickets.csv")
offspring <- crickets$offspring
strain <- crickets$strain
emp.val <- abs(var(offspring[strain == "strain42"]) - var(offspring[strain == "strain76"]))
null.dist <- c()
for(i in 1:1000){
toffspring <- sample(offspring)
null.dist[i] <- abs(var(toffspring[strain == "strain42"]) - var(toffspring[strain == "strain76"]))
}
mean(null.dist)
plot(density(null.dist))
sum(null.dist >= emp.val)/1000
mean(null.dist)
231129/5
