abline(h=.05, lty=2, col="blue")
sum(pvals<0.05)
# one of the characteristics of -logged values is that as the number
# goes to zero the -log of the number begins to increase disproportionately
logged <- -1*log(seq(from=0.0000001, to=1, length.out = 4000))
unlogged <- seq(from=0.0000001, to=1, length.out = 4000)
plot(logged~unlogged)
# ok so lets look at the pvalues from our GWAS
plot(-1*log(pvals, base=10), cex=.1, ylab="-log10(pvalue)")
# lets plot red lines to find our SNPs that contribute to the phenotype
for(i in 1:4){
abline(v=chosenSNPs[i],col="red",lwd=.3)
}
# this is that arbitrary cutoff I mentioned
abline(h=-1*log(5*10^-8, base=10),lty=3)
# our ability to detect a SNPs contribution are
# dependent on genotype frequencies in our
# sample.
par(mfcol=c(2,2))
for(i in 1:4){
hist(dat[,chosenSNPs[i]],
main=paste("site:",chosenSNPs[i]),
xlab="genotypes",
xaxt="n")
axis(side=1, at=1:3, labels = 1:3)
}
10/12
13/12
8.5/12
17/24
17/12
8/12
4/12
3.5/12
9/12
2/12
7.1*12
60/12
10/12
6.63*12
1.84*12
37*60
.236*2.54
.83*12
5.86*2
11.72*12
.85*12
dat <- matrix(NA, 200, 4000)
# now lets use a loop to fill in these genomes
# at each site we will pick a random allele frequency for
# the common allele and assign genotypes assuming HW equilibrium
for(i in 1:4000){
p <- runif(1, min = .5, max=.95)
q <- 1-p
dat[, i] <- sample(1:3, size=200, replace=T, prob=c(p^2, 2*p*q, q^2))
}
View(dat)
# now lets imagine that we have a trait that is controlled
# by a gene that includes 4 SNPs randomly chose from the genome
set.seed(1)
chosenSNPs <- sample(1:4000, 4)
dat[, chosenSNPs]
dat[, chosenSNPs]-1
rowSums(dat[, chosenSNPs]-1)
2*rowSums(dat[, chosenSNPs]-1)
# now we create our phenotype measured for each individual
# based on the genotype that they carry at the 4 loci chosen
y <- rnorm(200, mean=2*rowSums(dat[, chosenSNPs]-1), sd=1)
plot(y~dat[,679])
plot(y~dat[,1017])
plot(y~dat[,1000])
plot(y~dat[,1001])
plot(y~dat[,1002])
View(dat)
# now lets see if we can recover this by running a GWAS
pvals <- c()
# here we will loop across the genome and preform a glm
# testing the genotypes as a predictor for the phenotype
# we are interested in.
for(i in 1:4000){
pvals[i] <- anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
}
anova(lm(y ~ dat[,i]))
anova(lm(y ~ dat[,i]))->foo
anova(lm(y ~ dat[,i]))$'Pr(>F)'
anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
hist(pvals)
# lets make a vector of colors that is red if the
# pvalue is less than 0.05 and black otherwise
cols <- rep("black", 4000)
plot(pvals, cex=.1, col=cols)
cols[pvals < 0.05] <- "red"
plot(pvals, cex=.1, col=cols)
abline(h=.05, lty=2, col="blue")
sum(pvals<0.05)
# one of the characteristics of -logged values is that as the number
# goes to zero the -log of the number begins to increase disproportionately
logged <- -1*log(seq(from=0.0000001, to=1, length.out = 4000))
unlogged <- seq(from=0.0000001, to=1, length.out = 4000)
plot(logged~unlogged)
plot(logged~unlogged, xlim=c(0,.1))
plot(logged~unlogged, xlim=c(0,.02))
# ok so lets look at the pvalues from our GWAS
plot(-1*log(pvals, base=10), cex=.1, ylab="-log10(pvalue)")
# lets plot red lines to find our SNPs that contribute to the phenotype
for(i in 1:4){
abline(v=chosenSNPs[i],col="red",lwd=.3)
}
# this is that arbitrary cutoff I mentioned
abline(h=-1*log(5*10^-8, base=10),lty=3)
which(pvals<5*10^-8)
binom.test(18, 22, p=.5)
binom.test(4, 22, p=.5)
rbinom(47, 1, .5)
barplot(rbinom(47, 1, .5)
)
barplottable((rbinom(47, 1, .5)))
barplot(table(rbinom(47, 1, .5)))
rbinom(47, 2, .5)
# lets create 200 toy genomes with 4,000 SNPs
dat <- matrix(NA, 200, 4000)
p <- runif(1, min = .5, max=.95)
q <- 1-p
sample(1:3, size=200, replace=T, prob=c(p^2, 2*p*q, q^2))
# now lets use a loop to fill in these genomes
# at each site we will pick a random allele frequency for
# the common allele and assign genotypes assuming HW equilibrium
for(i in 1:4000){
p <- runif(1, min = .5, max=.95)
q <- 1-p
dat[, i] <- sample(1:3, size=200, replace=T, prob=c(p^2, 2*p*q, q^2))
}
View(dat)
# now lets imagine that we have a trait that is controlled
# by a gene that includes 4 SNPs randomly chose from the genome
set.seed(1)
chosenSNPs <- sample(1:4000, 4)
View(dat)
rowSums(dat[, chosenSNPs]
dat[, chosenSNPs]
rowSums(dat[, chosenSNPs]-1)
2*rowSums(dat[, chosenSNPs]-1)
# now we create our phenotype measured for each individual
# based on the genotype that they carry at the 4 loci chosen
y <- rnorm(200, mean=2*rowSums(dat[, chosenSNPs]-1), sd=1)
plot(y~dat[,1002])
plot(y~dat[,3908])
plot(y~dat[,679])
plot(y~dat[,2177])
# now lets see if we can recover this by running a GWAS
pvals <- c()
anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
# here we will loop across the genome and preform a glm
# testing the genotypes as a predictor for the phenotype
# we are interested in.
for(i in 1:4000){
pvals[i] <- anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
}
par(mfcol=c(1,1))
# this shows us the distribution of p-values for
# all loci
hist(pvals)
# lets make a vector of colors that is red if the
# pvalue is less than 0.05 and black otherwise
cols <- rep("black", 4000)
cols[pvals < 0.05] <- "red"
plot(pvals, cex=.1, col=cols)
abline(h=.05, lty=2, col="blue")
sum(pvals<0.05)
# one of the characteristics of -logged values is that as the number
# goes to zero the -log of the number begins to increase disproportionately
logged <- -1*log(seq(from=0.0000001, to=1, length.out = 4000))
unlogged <- seq(from=0.0000001, to=1, length.out = 4000)
plot(logged~unlogged, xlim=c(0,.02))
plot(logged~unlogged, xlim=c(0,1))
plot(logged~unlogged, xlim=c(0,.05))
plot(pvals, cex=.1, col=cols)
# ok so lets look at the pvalues from our GWAS
plot(-1*log(pvals, base=10), cex=.1, ylab="-log10(pvalue)")
# lets plot red lines to find our SNPs that contribute to the phenotype
for(i in 1:4){
abline(v=chosenSNPs[i],col="red",lwd=.3)
}
# this is that arbitrary cutoff I mentioned
abline(h=-1*log(5*10^-8, base=10),lty=3)
which(pvals<5*10^-8)
# our ability to detect a SNPs contribution are
# dependent on genotype frequencies in our
# sample.
par(mfcol=c(2,2))
for(i in 1:4){
hist(dat[,chosenSNPs[i]],
main=paste("site:",chosenSNPs[i]),
xlab="genotypes",
xaxt="n")
axis(side=1, at=1:3, labels = 1:3)
}
# lets create 200 toy genomes with 4,000 SNPs
dat <- matrix(NA, 200, 4000)
# now lets use a loop to fill in these genomes
# at each site we will pick a random allele frequency for
# the common allele and assign genotypes assuming HW equilibrium
for(i in 1:4000){
p <- runif(1, min = .5, max=.95)
q <- 1-p
dat[, i] <- sample(1:3, size=200, replace=T, prob=c(p^2, 2*p*q, q^2))
}
# now lets imagine that we have a trait that is controlled
# by a gene that includes 4 SNPs randomly chose from the genome
set.seed(1)
chosenSNPs <- sample(1:4000, 4)
# now we create our phenotype measured for each individual
# based on the genotype that they carry at the 4 loci chosen
y <- rnorm(200, mean=2*rowSums(dat[, chosenSNPs]-1), sd=1)
plot(y~dat[,2177])
# now lets see if we can recover this by running a GWAS
pvals <- c()
# here we will loop across the genome and preform a glm
# testing the genotypes as a predictor for the phenotype
# we are interested in.
for(i in 1:4000){
pvals[i] <- anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
}
par(mfcol=c(1,1))
# this shows us the distribution of p-values for
# all loci
hist(pvals)
# lets make a vector of colors that is red if the
# pvalue is less than 0.05 and black otherwise
cols <- rep("black", 4000)
cols[pvals < 0.05] <- "red"
plot(pvals, cex=.1, col=cols)
abline(h=.05, lty=2, col="blue")
sum(pvals<0.05)
# one of the characteristics of -logged values is that as the number
# goes to zero the -log of the number begins to increase disproportionately
logged <- -1*log(seq(from=0.0000001, to=1, length.out = 4000))
unlogged <- seq(from=0.0000001, to=1, length.out = 4000)
plot(logged~unlogged, xlim=c(0,.05))
# ok so lets look at the pvalues from our GWAS
plot(-1*log(pvals, base=10), cex=.1, ylab="-log10(pvalue)")
# lets plot red lines to find our SNPs that contribute to the phenotype
for(i in 1:4){
abline(v=chosenSNPs[i],col="red",lwd=.3)
}
# this is that arbitrary cutoff I mentioned
abline(h=-1*log(5*10^-8, base=10),lty=3)
which(pvals<5*10^-8)
# our ability to detect a SNPs contribution are
# dependent on genotype frequencies in our
# sample.
par(mfcol=c(2,2))
for(i in 1:4){
hist(dat[,chosenSNPs[i]],
main=paste("site:",chosenSNPs[i]),
xlab="genotypes",
xaxt="n")
axis(side=1, at=1:3, labels = 1:3)
}
View(dat)
help(t.test)
t.test(c(10,12,42),c(12,345,54))
1.08*12
8/12
5.22*12
10*12
48*3
48+48+36
72+48
6*12
4*2
8*12
48/12
18/12
8.77
72/8.77
5.43*8.209806
60/12
8/12
77/12
3.2*3*2*12
3.2*2*12
77/12
6.42/2
3.2*2*2*12
7*125
12*17*24
72/12
6/5
6.42*12
# set a seed
set.seed(3)
# simulate a tree with 20 tips
tree <- rcoal(20)
# we will use this to hold our values
betas <- pvals <- c.betas <- c.pvals <- c()
# this is the number of simulations we will run
nsims <- 10000
# we will generate 10,000 simulated datastes
for(i in 1:nsims){
# simulate two traits that evolve independently
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
# calculate the correlation between traits
results <- cor.test(trait1, trait2)
betas[i] <- results$estimate
pvals[i] <- results$p.value
}
# here we calculate the false positive rate
fpos <- sum(pvals<=.05)/nsims
# set a seed
set.seed(3)
# simulate a tree with 20 tips
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
set.seed(3)
# simulate a tree with 20 tips
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
help(rcoal)
plot(rtree(100))
help("rTraitCont")
# simulate a tree with 20 tips
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
plot(trait1~trait2)
set.seed(1)
tree <- rcoal(100)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
set.seed(1)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
set.seed(1)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
set.seed(1)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
plot(tree)
plot(tree, show.tip.label = F)
library(phytools)
contMap(tree, trait1)
contMap(tree, trait2)
set.seed(2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
plot(tree, show.tip.label = F)
contMap(tree, trait1)
contMap(tree, trait2)
set.seed(3)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
results <- cor.test(trait1, trait2)
betas <- results$estimate
pvals <- results$p.value
plot(tree, show.tip.label = F)
contMap(tree, trait1)
contMap(tree, trait2)
library(phytools)
# simulate a tree with 20 tips
set.seed(3)
tree <- rcoal(200)
plot(tree)
plot(tree, show.tip.label = F)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
plot(trait1~trait2)
plot(tree, show.tip.label = F)
results <- cor.test(trait1, trait2)
results$p.value
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
tree <- rcoal(200)
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
plot(trait1~trait2)
plot(tree, show.tip.label = F)
results <- cor.test(trait1, trait2)
results$p.value
for(i in 1:1000){
trait1 <- rTraitCont(phy=tree)
trait2 <- rTraitCont(phy=tree)
results <- cor.test(trait1, trait2)
betas[i] <- results$estimate
pvals[i] <- results$p.value
}
sum(pvals<=.05)/1000
pvals[1]
hist(pvals[2:1000])
hist(pvals[2:1000], xlim=c(0,.1), breaks=100)
hist(pvals[2:1000], xlim=c(0,.1), breaks=500)
hist(pvals[2:1000], xlim=c(0,.01), breaks=500)
hist(pvals[2:1000], xlim=c(0,.01), breaks=900)
hist(pvals[2:1000], xlim=c(0,.001), breaks=900)
hist(pvals[2:1000], xlim=c(0,.001), breaks=1900)
mean(pvals)
null.data <- pvals[2:1000]
sum(null.data <= first.data)
first.data <- pvals[1]
null.data <- pvals[2:1000]
sum(null.data <= first.data)
132/12
11/8.47
59+32
64/12
6.28*12
64/12
12/4
4.68*12
54/4
14*4
4/12
5/12
