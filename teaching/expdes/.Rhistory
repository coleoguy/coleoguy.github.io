ggraptR(iris)
ggplot(iris, aes(x=Species, y=Sepal.Width)) +
geom_boxplot(outlier.shape = NA) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.6, alpha=.5)+
theme_tufte()
ggraptR(iris)
dat <- read.csv("Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/betta_splendens.csv")
ggraptR(dat)
ggplot(dat, aes(y=~parental.mean, x=~fight.won)) + geom_point(aes(shape=~as.factor(mated), size=~size, colour=~origin.con), stat="identity", position="jitter", alpha=0.5) + facet_grid(. ~ rearing) + theme_bw() + theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) + guides(shape=guide_legend(title="mated")) + xlab("fight.won") + ylab("parental.mean")
ggplot(dat, aes(y=parental.mean, x=fight.won)) + geom_point(aes(shape=as.factor(mated), size=size, colour=origin.con), stat="identity", position="jitter", alpha=0.5) + facet_grid(. ~ rearing) + theme_bw() + theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) + guides(shape=guide_legend(title="mated")) + xlab("fight.won") + ylab("parental.mean")
ggraptR(dat)
ggplot(dat, aes(y=parental.mean, x=fight.won)) + geom_point(aes(size=size, colour=mated), stat="identity", position="jitter", alpha=0.5) + theme_grey() + theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) + xlab("fight.won") + ylab("parental.mean")
setwd("~/Downloads")
dat <- read.csv("final1 (1).csv")
fit <- glm(dat$size ~ dat$day + dat$sex + dat$food + abs(37-dat$temp))
summary(fit)
fit2 <- glm(dat$size ~ dat$day + dat$sex + dat$food + abs(37-dat$temp) + dat$incubator)
summary(fit2)
fit2 <- glm(dat$size ~ dat$day + dat$sex + dat$food + 37-dat$temp + dat$incubator)
fit2 <- glm(dat$size ~ dat$day + dat$sex + dat$food + (37-dat$temp) + dat$incubator)
dat$temp
dat$temp
37-dat$temp
temp <- (37-dat$temp)
fit2 <- glm(dat$size ~ dat$day + dat$sex + dat$food + temp + dat$incubator)
summary(fit2)
summary(fit)
summary(fit)
temp <- (37-dat$temp)
fit2 <- glm(dat$size ~ dat$day + dat$sex + dat$food + temp + dat$incubator)
summary(fit2)
fit2 <- glm(dat$size ~ dat$day^2 + dat$sex + dat$food + temp + dat$incubator)
summary(fit2)
plot(fit2$residuals)
plot(fit$residuals)
summary(fit)
View(dat)
help(seq)
finals <- seq.int(from=30, by=30 length.out=200)
finals <- seq.int(from=30, by=30, length.out=200)
dat2 <- [finals,]
dat2 <- dat[finals,]
starts <- seq.int(from=1, by=30, length.out=200)
finals <- seq.int(from=30, by=30, length.out=200)
i <- 1
starts[i]:finals[i]
dat$temp[starts[i]:finals[i]]
(37-(dat$temp[starts[i]:finals[i]]))
mean(abs(37-(dat$temp[starts[i]:finals[i]])))
for(i in 1:200){
mean.temps[i] <- mean(abs(37-(dat$temp[starts[i]:finals[i]])))
}
mean.temps <- c()
for(i in 1:200){
mean.temps[i] <- mean(abs(37-(dat$temp[starts[i]:finals[i]])))
}
dat2$temp <- mean.temps
colnames(dat2)
View(dat2)
fit <- glm(dat2$size ~ dat2$sex + dat2$food + dat2$temp)
summary(fit)
fit <- glm(dat2$size ~ dat2$sex + dat2$food + dat2$temp +dat2$incubator)
summary(fit)
View(dat2)
library(ggraptR)
ggraptR(dat2)
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot", position="dodge", alpha=0.5, width=0.2) +
facet_grid(. ~ temp) +
theme_grey() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot", position="dodge", alpha=0.5, width=0.2) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot", position="dodge", alpha=0.5, width=0.2) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), size = 1, shape = 16, position = position_jitterdodge()) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
help("geom_boxplot")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  alpha=0.5, width=0.2) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), size = 1, shape = 16, position = position_jitterdodge()) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), size = 1, shape = 16, position = position_jitterdodge()) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position = 2,alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), size = 1, shape = 16, position = position_jitterdodge()) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position = 2,alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, position = position_jitterdodge()) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, position = position_jitterdodge()) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
help("position_jitterdodge")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, position = position_jitterdodge(dodge.width = .2)) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position="dodge2", alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, position = position_jitterdodge(dodge.width = .2)) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=c(1:4), alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, position = position_jitterdodge(dodge.width = .2)) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=0.2, outlier.shape = NA) +
facet_grid(. ~ temp) +
theme_grey() +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, stackdir='center',
position=position_dodge(1)) +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=0.2, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=0.4, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=0.9, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 1, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(aes(fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(aes(y=size, fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(aes(y=size, fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center') +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_point(aes(y=size, fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center') +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center') +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center', position_dodge2()) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_point(aes(fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center', position="dodge") +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_point(aes(y=size, fill = as.factor(sex)), alpha=.5, size = 2, shape = 16, stackdir='center',
position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center', position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center', size=.5position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center', size=.5,position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
help("geom_dotplot")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",  position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center', dotsize=.5,position=position_dodge(1)) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",
position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center',
dotsize=.5,position=position_dodge(1), alpha=.5) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("as.factor(food)") + ylab("size")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",
position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center',
dotsize=.5,position=position_dodge(1), alpha=.5) +
facet_grid(. ~ temp) +
theme_grey() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("Type of flour") + ylab("Size (mm)")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",
position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center',
dotsize=.5,position=position_dodge(1), alpha=.5) +
facet_grid(. ~ temp) +
theme_white() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("Type of flour") + ylab("Size (mm)")
ggplot(dat2, aes(y=size, x=as.factor(food))) +
geom_boxplot(aes(fill=as.factor(sex)), stat="boxplot",
position=, alpha=0.5, width=1, outlier.shape = NA) +
geom_dotplot(binaxis='y', aes(fill=as.factor(sex)),stackdir='center',
dotsize=.5,position=position_dodge(1), alpha=.5) +
facet_grid(. ~ temp) +
theme_bw() +
# theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="sex")) + xlab("Type of flour") + ylab("Size (mm)")
library(phytools)
help(make.simmap)
library(geiger)
help("sim.bdtree"
)
library(diversitree)
library(diversitree)
# We begin with a single tree and test it at every scaling factor then move to the next tree
####### FIGURE OUT HOW TO PRUNE EXTINCT TAXA ########
trees <- tree.bd(pars= c(3,1), max.taxa=n.taxa, include.extinct=FALSE)
n.taxa=200
# We begin with a single tree and test it at every scaling factor then move to the next tree
####### FIGURE OUT HOW TO PRUNE EXTINCT TAXA ########
trees <- tree.bd(pars= c(3,1), max.taxa=n.taxa, include.extinct=FALSE)
# We begin with a single tree and test it at every scaling factor then move to the next tree
####### FIGURE OUT HOW TO PRUNE EXTINCT TAXA ########
trees <- tree.bd(pars= c(3,1), max.taxa=n.taxa, include.extinct=FALSE)
# We begin with a single tree and test it at every scaling factor then move to the next tree
####### FIGURE OUT HOW TO PRUNE EXTINCT TAXA ########
trees <- tree.bd(pars= c(1,3), max.taxa=n.taxa, include.extinct=FALSE)
# We begin with a single tree and test it at every scaling factor then move to the next tree
####### FIGURE OUT HOW TO PRUNE EXTINCT TAXA ########
trees <- tree.bd(pars= c(1,3), max.taxa=n.taxa, include.extinct=FALSE)
help("make.bd")
trees <- trees.bd(pars= c(1,3), max.taxa=n.taxa, include.extinct=FALSE)
trees <- trees(pars= c(1,3), max.taxa=n.taxa, include.extinct=FALSE)
# We begin with a single tree and test it at every scaling factor then move to the next tree
####### FIGURE OUT HOW TO PRUNE EXTINCT TAXA ########
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)
# We begin with a single tree and test it at every scaling factor then move to the next tree
####### FIGURE OUT HOW TO PRUNE EXTINCT TAXA ########
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
plot(trees)
max(branching.times(trees))
help("branching.times")
trees$edge.length <- trees$edge.length / max(branching.times(trees))
max(branching.times(trees))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## Loading the data
data("iris")
## Adding IDs to each plant as numbers 1 to 150
iris_id <- iris %>% mutate(ID = 1:150)
## Making tidy data
tidy_iris <- iris_id %>% gather(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width,
key = "Measure type", value = "Value")
## Final data is "tidy_iris"
tidy_iris
# iter will hold the number of replicates that
# we wish to perform
iter <- 1000
# this will hold the result of each simulation
retrogenes <- matrix(, 4, iter)
View(retrogenes)
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes")
# now we are reading data in from the desktop
dat <- read.csv("retrogenes.csv")
View(dat)
# this will hold the result of each simulation
retrogenes <- matrix(, 8, iter)
sum(dat$number.of.parent.genes)
sum(dat$number.of.offspring.genes)
dat$gene.number
dat$gene.number/sum(dat$gene.number)
c.retro <- sample(c(1:7, "X"),
60,
replace = T,
prob = dat$gene.number/sum(dat$gene.number))
c.retro
for(i in 1:iter){
# I'm going to set a seed value so that whoever runs
# this script will get the same result as I did
# mainly this is important becuase random variation
# between runs would lead to different margins which
# would mess up where I am putting the text at the end
set.seed(i)
# this is just a counter so we can know if
# our loop is running
print(i)
# this performs the simulation pulling origins of
# retrogenes with a probability that is based
# on the number of genes present on each chromosome
c.retro <- sample(c(1:7, "X"),
60,
replace = T,
prob = dat$gene.number/sum(dat$gene.number))
# these next four lines simply count up the number
# of retrogenes that originated on each chromosome
retrogenes[1, i] <- sum(c.retro == "X")
retrogenes[2, i] <- sum(c.retro == "1")
retrogenes[3, i] <- sum(c.retro == "2")
retrogenes[4, i] <- sum(c.retro == "3")
retrogenes[5, i] <- sum(c.retro == "4")
retrogenes[6, i] <- sum(c.retro == "5")
retrogenes[7, i] <- sum(c.retro == "6")
retrogenes[8, i] <- sum(c.retro == "7")
}
View(retrogenes)
row.names(retrogenes) <- c("X",1:7)
View(retrogenes)
View(retrogenes)
plot(density(retrogenes[1,]))
abline(v=11)
sum(retrogenes[1,]>11)/iter
.05/8
help(dbinom)
dbinom(1, 8, prob=.05)
for(i in 1:iter){
# I'm going to set a seed value so that whoever runs
# this script will get the same result as I did
# mainly this is important becuase random variation
# between runs would lead to different margins which
# would mess up where I am putting the text at the end
set.seed(i)
# this is just a counter so we can know if
# our loop is running
print(i)
# this performs the simulation pulling origins of
# retrogenes with a probability that is based
# on the number of genes present on each chromosome
c.retro <- sample(c(1:7, "X"),
60,
replace = T,
prob = dat$Size/sum(dat$Size))
# these next four lines simply count up the number
# of retrogenes that originated on each chromosome
retrogenes[1, i] <- sum(c.retro == "X")
retrogenes[2, i] <- sum(c.retro == "1")
retrogenes[3, i] <- sum(c.retro == "2")
retrogenes[4, i] <- sum(c.retro == "3")
retrogenes[5, i] <- sum(c.retro == "4")
retrogenes[6, i] <- sum(c.retro == "5")
retrogenes[7, i] <- sum(c.retro == "6")
retrogenes[8, i] <- sum(c.retro == "7")
}
row.names(retrogenes) <- c("X",1:7)
View(retrogenes)
plot(density(retrogenes[1,]))
abline(v=11)
sum(retrogenes[1,]>11)/iter
# iter will hold the number of replicates that
# we wish to perform
iter <- 1000000
# this will hold the result of each simulation
retrogenes <- matrix(, 8, iter)
# this is the loop that will effectively simulate
# evolution and the orgin of new retrogenes
for(i in 1:iter){
# I'm going to set a seed value so that whoever runs
# this script will get the same result as I did
# mainly this is important becuase random variation
# between runs would lead to different margins which
# would mess up where I am putting the text at the end
set.seed(i)
# this is just a counter so we can know if
# our loop is running
print(i)
# this performs the simulation pulling origins of
# retrogenes with a probability that is based
# on the number of genes present on each chromosome
c.retro <- sample(c(1:7, "X"),
60,
replace = T,
prob = dat$Size/sum(dat$Size))
# these next four lines simply count up the number
# of retrogenes that originated on each chromosome
retrogenes[1, i] <- sum(c.retro == "X")
retrogenes[2, i] <- sum(c.retro == "1")
retrogenes[3, i] <- sum(c.retro == "2")
retrogenes[4, i] <- sum(c.retro == "3")
retrogenes[5, i] <- sum(c.retro == "4")
retrogenes[6, i] <- sum(c.retro == "5")
retrogenes[7, i] <- sum(c.retro == "6")
retrogenes[8, i] <- sum(c.retro == "7")
}
dbinom(666, 1000, .5)
rbinom(1000, 1000, .5)->foo
plot(density(foo))
rbinom(200, 1000, .5)->foo
plot(density(foo))
rbinom(1000, 200, .5)->foo
plot(density(foo))
