runApp('Desktop/Dropbox/websites/rice/Epi_to_Adi')
shiny::runApp('Desktop/Dropbox/websites/Coleoptera.Karyotypes')
runApp('Desktop/Dropbox/websites/Coleoptera.Karyotypes')
runApp('Desktop/Dropbox/websites/Amphibian.Karyotypes')
4*3*4*100
50/4
50/90
40/90
40/50
30/50
50*.6
50*.4
50*.2
50*c(1,.8,.6,.4,.2,.1)
50*c(.8,.6,.4,.2,.1)
100*c(.8,.6,.4,.2,.1)
500*c(.8,.6,.4,.2,.1)
1000*c(.8,.6,.4,.2,.1)
1000*c(.8,.6,.4,.2,.1,.05)
500*c(.8,.6,.4,.2,.1,.05)
100*c(.8,.6,.4,.2,.1,.05)
50*c(.8,.6,.4,.2,.1,.05)
4800*3
4 * 6 * 2 * 100 * 4 * 3
14400/3
4800*4
57600/3
19200*4
750000+30000
780000-594000
library(ape)
tree <- rtree(40)
plot(tree)
10^(-1:6)
l <- 10^(-1:6)
cv <- numeric(length(l))
tree <- rtree(10)
plot(tree)
l <- 10^(-1:6)
cv <- numeric(length(l))
for (i in 1:length(l)){
print(i)
cv[i] <- sum(attr(chronopl(tree, lambda = l[i], CV=TRUE), "D2"))
}
plot(l, cv)
cv
l
for (i in 1:length(l)){
print(i)
cv[i] <- sum(attr(chronos(tree, lambda = l[i], CV=TRUE), "D2"))
}
help("chronos")
library(ape)
tree <- rtree(10)
plot(tree)
l <- 10^(-1:6)
cv <- numeric(length(l))
for (i in 1:length(l)){
print(i)
cv[i] <- sum(attr(chronos(tree, lambda = l[i], CV=TRUE), "D2"))
}
library(ape)
tree <- rtree(10)
plot(tree)
l <- 10^(-1:6)
cv <- numeric(length(l))
for (i in 1:length(l)){
print(i)
cv[i] <- sum(attr(chronos(tree, lambda = l[i], CV=TRUE), "D2"))
}
for (i in 1:length(l)){
print(i)
cv[i] <- sum(attr(chronopl(tree, lambda = l[i], CV=TRUE), "D2"))
}
plot(l, cv)
cv
set.seed(1)
tree <- rtree(10)
plot(tree)
l <- 10^(-1:6)
cv <- numeric(length(l))
for (i in 1:length(l)){
print(i)
cv[i] <- sum(attr(chronopl(tree, lambda = l[i], CV=TRUE), "D2"))
}
plot(l, cv)
10^(-1:6)
new.tree <- chronos(tree, lamda=.1, model="correlated")
new.tree <- chronos(tree, lambda=.1, model="correlated")
plot(new.tree)
max(branching.times(new.tree))
new.tree$edge.length * root
root <- 72
new.tree$edge.length * root
new.tree$edge.length <- new.tree$edge.length * root
plot(tree)
plot(new.tree)
# lets make a sample genome as a matrix with two rows (diploid)
# and 10 cols (genes)
genome <- matrix(,2,10)
p1 <- p2 <- f1 <- bc1 <- bc2 <- list()
effect.sizes <- runif(min=0, max=1, n=10)
effect.sizes
hist(rlnorm(n=1000))
hist(rlnorm(n=10))
effect.sizes <- rlnorm(n=10)
effect.sizes
# lets assign the mode of gene action for each locus
gen.arch <- sample(c("A","D"), size=10, replace=T)
epi.pair <- sample(1:10, 2)
type <- paste(gen.arch[epi.pair], sep="")
type <- paste(gen.arch[epi.pair], collapse="")
type <- paste(sort(gen.arch[epi.pair]), collapse="")
type <- paste(sort(gen.arch[epi.pair]), collapse="")
type <- paste(sort(gen.arch[epi.pair]), collapse="")
type <- paste(sort(gen.arch[epi.pair]), collapse="")
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
# This script creates simulted line cross data based on a model
# where we can vary the assumption of homozygosity for alleles that
# impact a trait
# lets make a sample genome as a matrix with two rows (diploid)
# and 10 cols (genes)
genome <- matrix(,2,10)
# lets start off by having 20 individuals per cohort
# lets make a list to hold our cohorts
p1 <- p2 <- f1 <- bc1 <- bc2 <- list()
# lets draw effect sizes for each locus from a log normal
# this should give us mostly small effect size but a few large
effect.sizes <- rlnorm(n = 10)
effect.sizes[effect.sizes > 5] <- 5
# lets assign the mode of gene action for each locus
gen.arch <- sample(c("A","D"), size=10, replace=T)
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
dev.min <- 0
effect.sizes[gen.arch=="A"]
sum(effec.sizes)
sum(effect.sizes)
help(rlnorm)
mean(rlnorm(meanlog=0,n=1000))
mean(rlnorm(meanlog=.1,n=1000))
mean(rlnorm(meanlog=.3,n=1000))
mean(rlnorm(meanlog=0,n=1000, sdlog=.5))
hist(rlnorm(meanlog=0,n=1000, sdlog=.5))
hist(rexp(n=1000))
help("rexp")
mean(rexp(n=1000))
# lets draw effect sizes for each locus from a exponential dist.
# with a rate parameter of 1 (mean=1)
# this should give us mostly small effect size but a few large
effect.sizes <- rexp(n = 10)
effect.sizes[effect.sizes > 5] <- 5
effect.sizes
# lets draw effect sizes for each locus from a exponential dist.
# with a rate parameter of 1 (mean=1)
# this should give us mostly small effect size but a few large
effect.sizes <- rexp(n = 10, rate=.5)
# lets draw effect sizes for each locus from a exponential dist.
# with a rate parameter of 1 (mean=1)
# this should give us mostly small effect size but a few large
effect.sizes <- rexp(n = 10, rate=2)
effect.sizes
# lets draw effect sizes for each locus from a exponential dist.
# with a rate parameter of 2 (mean = 1/rate = 0.5)
# this should give us mostly small effect size but a few large
effect.sizes <- rexp(n = 10, rate=2)
effect.sizes[effect.sizes > 5] <- 5
# lets assign the mode of gene action for each locus
gen.arch <- sample(c("A","D"), size=10, replace=T)
# lets choose a pair to act epistatically
epi.pair <- sample(1:10, 2)
type <- paste(sort(gen.arch[epi.pair]), collapse="")
sum(effect.sizes)
dev.min <- 2*sum(effect.sizes)
p1.exp <- dev.min + sum(effect.sizes)
exp.p1 <- dev.min + sum(effect.sizes)
exp.p2 <- dev.min
exp.p1 <- dev.min + sum(effect.sizes)
exp.p2 <- dev.min
exp.f1 <- dev.min +
sum(0.5 * effect.sizes[effect.sizes == "A"]
exp.f1 <- dev.min +
sum(effect.sizes[effect.sizes == "D"]) +
sum(0.5 * effect.sizes[effect.sizes == "A"])
sum(effect.sizes[effect.sizes == "D"])
effect.sizes == "D"
# lets assign the mode of gene action for each locus
gen.arch <- sample(c("A","D"), size=10, replace=T)
exp.p1 <- dev.min + sum(effect.sizes)
exp.p2 <- dev.min
exp.f1 <- dev.min +
sum(effect.sizes[gen.arch == "D"]) +
sum(0.5 * effect.sizes[gen.arch == "A"])
load("~/Desktop/Dropbox/projects/sex.bias/rscripts/results/rare.female.model.RData")
sim1 <- results$males100$females0.05$rd0.5$h0.5$s0.9
View(sim1)
hist(sim1)
hist(sim1[,3])
sim2 <- results$males500$females0.1$rd0.5$h0.5$s0.9
hist(sim2[,3])
sim2 <- results$males500$females0.1$rd0.1$h0.5$s0.9
hist(sim2[,1])
hist(sim2[,2])
sim2 <- results$males500$females0.1$rd0.5$h0.5$s0.9
plot(density(sim2[,3]))
sim1 <- results$males500$females0.1$rd0.5$h0.5$s0.1
sim2 <- results$males500$females0.1$rd0.5$h0.5$s0.2
sim3 <- results$males500$females0.1$rd0.5$h0.5$s0.5
sim4 <- results$males500$females0.1$rd0.5$h0.5$s0.9
plot(density(sim1[,3]))
View(sim1)
plot(density(sim1[,3]), xlim=c(0,1))
plot(density(sim1[,3]), xlim=c(0,1), bw=.1)
plot(density(sim1[,3], bw=.1), xlim=c(0,1))
plot(density(sim1[,3], bw=.01), xlim=c(0,1))
plot(density(sim1[,3], bw=.05), xlim=c(0,1))
plot(density(sim1[,3], bw=.01), xlim=c(0,1))
plot(density(sim1[,3], bw=.01), xlim=c(0,1), col=rgb(1,0,0))
plot(density(sim1[,3], bw=.01), xlim=c(0,1), col=rgb(.1,0,0))
plot(density(sim1[,3], bw=.01), xlim=c(0,1), col="#fee5d9")
plot(density(sim1[,3], bw=.01), xlim=c(0,1), col="#fc9272")
lines(density(sim2[,3], bw=.01), col="#fb6a4a")
plot(density(sim1[,3], bw=.01), xlim=c(0,1), col="#fc9272")
lines(density(sim2[,3], bw=.01), col="#fb6a4a")
lines(density(sim3[,3], bw=.01), col="#de2d26")
lines(density(sim4[,3], bw=.01), col="#a50f15")
plot(density(sim1[,3], bw=.01), xlim=c(0,1), ylim=c(0,30),col="#fc9272")
lines(density(sim2[,3], bw=.01), col="#fb6a4a")
lines(density(sim3[,3], bw=.01), col="#de2d26")
lines(density(sim4[,3], bw=.01), col="#a50f15")
plot(density(sim1[,3], bw=.01), xlim=c(0,1), ylim=c(0,35),col="#fc9272")
lines(density(sim2[,3], bw=.01), col="#fb6a4a")
lines(density(sim3[,3], bw=.01), col="#de2d26")
lines(density(sim4[,3], bw=.01), col="#a50f15")
seq(from=100000, to=9900000, lengthl.out=15)
seq(from=100000, to=9900000, length.out=15)
help("chisq.test")
shiny::runApp('Desktop/Dropbox/gitrepos/misc/pairwise')
load("~/Desktop/Dropbox/test.run.RData")
load("~/Desktop/Dropbox/projects/coleo.chrom.num/data.analysis/results/wing.runs.RData")
help(t.test)
lake1 <- rnorm(100, mean=10)
lake2 <- rnorm(100, mean=10.1)
t.test(lake1, lake2)
data(iris)
fit <- lm(iris$Sepal.Length~iris$Sepal.Width)
fit.sum <- summary(fit)
fit.sum$coefficients
fit.sum$coefficients
pval <- summary(lm(iris$Sepal.Length~iris$Sepal.Width))$coefficient[2,4]
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(200))
hist(rnorm(200))
hist(rnorm(200))
hist(rnorm(200))
hist(rnorm(200))
hist(rnorm(200))
hist(rnorm(200))
hist(rnorm(20000))
hist(rnorm(20000))
hist(rnorm(20000))
hist(rnorm(20000))
hist(rnorm(20000))
hist(rnorm(200000))
hist(rnorm(2000000))
hist(rnorm(2000000))
hist(rnorm(2000000))
hist(rnorm(2000000))
hist(rnorm(2000000))
knitr::opts_chunk$set(echo = TRUE)
for(i in 1:10){
print(paste("This is the number", i))
}
counter <- 0
dat <- rnorm(1000)
for(i in 1:length(dat)){
if(dat[i]>1){
counter <- counter + 1
}
}
prop.large <- counter/length(dat) * 100
help(rpois)
hist(rpois(n=100, lambda = 3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
sum(rpois(n=100, lambda=3))
help("apply")
data(iris)
View(iris)
# lets take a peak at this data
head(iris)
data(iris)
# lets take a peak at this data
head(iris)
# ok lets calculate the variance of each
# morphological measures (the first 4 cols)
result <- apply(X = iris[,1:4], MARGIN = 2, FUN = var)
help(rnorm)
dnorm(x=3)
help(hist)
knitr::opts_chunk$set(echo = TRUE)
library(beeswarm)
dat1 <- rnorm(200)
dat2 <- rnorm(200, mean=.25)
dat3 <- rnomr(200, mean=.5)
library(beeswarm)
dat1 <- rnorm(200)
dat2 <- rnorm(200, mean=.25)
dat3 <- rnorm(200, mean=.5)
dat <- data.frame(dat1,dat2,dat3)
beeswarm(dat)
beeswarm(dat, pch=16, cex=.3)
help("beeswarm")
beeswarm(dat, pch=16, cex=.3, method="center")
beeswarm(dat, pch=16, cex=.3, method="center",
col=c("red","blue","green"))
dat1 <- rnorm(2000)
dat2 <- rnorm(2000, mean=.25)
dat3 <- rnorm(2000, mean=.5)
dat <- data.frame(dat1,dat2,dat3)
beeswarm(dat, pch=16, cex=.3, method="center",
col=c("red","blue","green"))
beeswarm(dat, pch=16, cex=.03, method="center",
col=c("red","blue","green"))
dat1 <- rnorm(100)
dat2 <- rnorm(100, mean=.25)
dat3 <- rnorm(100, mean=.5)
dat <- data.frame(dat1,dat2,dat3)
beeswarm(dat, pch=16, cex=.03, method="center",
col=c("red","blue","green"))
beeswarm(dat, pch=16, cex=.5, method="center",
col=c("red","blue","green"))
beeswarm(dat, pch=16, cex=.5, method="hex",
col=c("red","blue","green"))
beeswarm(dat, pch=c(16,14,16), cex=.5, method="hex",
col=c("red","blue","green"))
beeswarm(dat, pch=c(16,13,16), cex=.5, method="hex",
col=c("red","blue","green"))
beeswarm(dat, pch=c(16,3,16), cex=.5, method="hex",
col=c("red","blue","green"))
install.packages("lmeTest")
install.packages("lmerTest")
shiny::runApp('Desktop/Dropbox/websites/Amphibian.Karyotypes')
tolower
help(tolower)
runApp('Desktop/Dropbox/websites/Amphibian.Karyotypes')
runApp('Desktop/Dropbox/websites/Amphibian.Karyotypes')
runApp('Desktop/Dropbox/websites/Amphibian.Karyotypes')
runApp('Desktop/Dropbox/websites/Amphibian.Karyotypes')
install.packages("genepop")
dat <- read.csv("betta_splendens.csv")
dat <- dat[-25,]
dat$rearing[dat$rearing=="soocial"]<- "social"
write.csv(dat, file="new.betta.csv", row.names = F)
dat <- read.csv("new.betta.csv")
library(beeswarm)
beeswarm(dat$fight.won~dat$rearing, cex=.43,
col=c("red","blue"),pch=16,spacing=.82,
corral="wrap",method="center")
noise <- rnorm(n=499,sd=.21)
plot(y=dat$fight.won,
y= as.numeric(dat$rearing) + noise,
xlim=c(0.5,2.5),
pch=16)
plot(y=dat$fight.won,
y= as.numeric(dat$rearing),
xlim=c(0.5,2.5),
pch=16)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing),
xlim=c(0.5,2.5),
pch=16)
dat <- read.csv("betta_splendens.csv")
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes")
dat <- read.csv("betta_splendens.csv")
dat <- dat[-25,]
dat$rearing[dat$rearing=="soocial"]<- "social"
write.csv(dat, file="new.betta.csv", row.names = F)
dat <- read.csv("new.betta.csv")
library(beeswarm)
beeswarm(dat$fight.won~dat$rearing, cex=.43,
col=c("red","blue"),pch=16,spacing=.82,
corral="wrap",method="center")
noise <- rnorm(n=499,sd=.21)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing),
xlim=c(0.5,2.5),
pch=16)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing)+noise,
xlim=c(0.5,2.5),
pch=16)
noise <- rnorm(n=499,sd=.1)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing)+noise,
xlim=c(0.5,2.5),
pch=16)
noise <- rnorm(n=499,sd=.07)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing)+noise,
xlim=c(0.5,2.5),
pch=16)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing)+noise,
xlim=c(0.5,2.5),
pch=16,
col=dat$rearing)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing)+noise,
xlim=c(0.5,2.5),
ylim=c(0,11)
pch=16,
col=dat$rearing)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing)+noise,
xlim=c(0.5,2.5),
ylim=c(0,11),
pch=16,
col=dat$rearing)
plot(y=dat$fight.won,
x= as.numeric(dat$rearing)+noise,
xlim=c(0.5,2.5),
ylim=c(-1,11),
pch=16,
col=dat$rearing)
plot(y=dat$fight.won,
x= dat$size,
xlim=c(0.5,2.5),
ylim=c(-1,11),
pch=16)
plot(y=dat$fight.won,
x= dat$size,
pch=16)
View(dat)
plot(y=dat$fight.won,
x= dat$parental.mean,
pch=16)
