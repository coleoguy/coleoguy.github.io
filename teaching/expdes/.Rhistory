generations[[i]] <- x
}
test.result2 <- converttoKs(generations)
ks.test(test.result1,test.result2)
ks.test(test.result1,test.result1)
# Create testing data
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
# Create testing data
library(phytools)
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
library(geiger)
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
library(diversitree)
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = 100,
include.extinct = F)[[1]]
names(tree)
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')
names(cont.trait) <- tree$tip.label # this line somehow makes anc.ML work????
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')
row.names(cont.trait)
names(cont.trait) <- tree$tip.label # this line somehow makes anc.ML work????
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')[,,1]
cont.trait
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(tree, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= n.taxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= 100){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= 100){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= 100){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
scale.factor <- 5
# we leave the original trees un altered
alt.tree <- tree
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
rate <- .3
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = sample(c(1,2),1))
if((0.05 * 100) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (.95 * 100)){
good.sim <- T
}
}
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
##### create named vector for disc trait for all taxa #####
dt.vec <- data[, 3]
# we now apply the AncCond test to our simulated data and record its result
data <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
##### create named vector for disc trait for all taxa #####
dt.vec <- data[, 3]
names(dt.vec) <- data[, 1]
##### create named vector for cont trait taxa not in derived state #####
if(!is.null(drop.state)){
ct.data <- data[(data[, 3] != drop.state),]
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}else{
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}
matrix(c(0,2,1,0), 2)
## ASR for discrete trait
## using stochastic mappings to nail down specific transition points
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(c(0,2,1,0), 2),
nsim = 1,
pi = "estimated",
message = F)
ls()
## ASR for the continuous trait
anc.states.cont.trait <- cont.trait.AC
ls()
iter <- 100
mat <- c(0,2,1,0)
ls()
ls()[!-c(2,3,21,13,16]
ls()[!-c(2,3,21,13,16)]
ls()[-c(2,3,21,13,16)]
# Create testing data
library(phytools)
library(geiger)
library(diversitree)
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = 100,
include.extinct = F)[[1]]
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')[,,1]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(tree, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= 100){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= 100){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
scale.factor <- 5
# we leave the original trees un altered
alt.tree <- tree
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
rate <- .3
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = sample(c(1,2),1))
if((0.05 * 100) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (.95 * 100)){
good.sim <- T
}
}
# we now apply the AncCond test to our simulated data and record its result
data <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
##### create named vector for disc trait for all taxa #####
dt.vec <- data[, 3]
names(dt.vec) <- data[, 1]
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
## ASR for the continuous trait
anc.states.cont.trait <- cont.trait.AC
## ASR for discrete trait
## using stochastic mappings to nail down specific transition points
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(c(0,2,1,0), 2),
nsim = 1,
pi = "estimated",
message = F)
iter <- 100
mat <- c(0,2,1,0)
rm(list=ls()[-c(2,3,21,13,16)])
# Create testing data
library(phytools)
library(geiger)
library(diversitree)
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = 100,
include.extinct = F)[[1]]
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')[,,1]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(tree, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= 100){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= 100){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
scale.factor <- 5
# we leave the original trees un altered
alt.tree <- tree
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
rate <- .3
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = sample(c(1,2),1))
if((0.05 * 100) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (.95 * 100)){
good.sim <- T
}
}
# we now apply the AncCond test to our simulated data and record its result
data <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
##### create named vector for disc trait for all taxa #####
dt.vec <- data[, 3]
names(dt.vec) <- data[, 1]
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
## ASR for the continuous trait
anc.states.cont.trait <- cont.trait.AC
## ASR for discrete trait
## using stochastic mappings to nail down specific transition points
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(c(0,2,1,0), 2),
nsim = 1,
pi = "estimated",
message = F)
iter <- 100
mat <- c(0,2,1,0)
ls()
rm(list=ls()[-c(2,3,22,14,17)])
if(sum(mat) > 1){
nulldist <- matrix(,iter,2)
colnames(nulldist) <- c('12','21')
}else{
nulldist <- vector(length = iter)
}
if(sum(mat) > 1){
nulldist <- matrix(NA,iter,2)
colnames(nulldist) <- c('12','21')
}else{
nulldist <- vector(length = iter)
}
View(nulldist)
anc.state.dt
anc.state.dt$Q
anc.state.dt$orig
help(make.simmap)
# Create testing data
library(phytools)
library(geiger)
library(diversitree)
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = 100,
include.extinct = F)[[1]]
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')[,,1]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(tree, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= 100){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= 100){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
scale.factor <- 5
# we leave the original trees un altered
alt.tree <- tree
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
rate <- .3
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = sample(c(1,2),1))
if((0.05 * 100) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (.95 * 100)){
good.sim <- T
}
}
# we now apply the AncCond test to our simulated data and record its result
data <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
##### create named vector for disc trait for all taxa #####
dt.vec <- data[, 3]
names(dt.vec) <- data[, 1]
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
## ASR for the continuous trait
anc.states.cont.trait <- cont.trait.AC
## ASR for discrete trait
## using stochastic mappings to nail down specific transition points
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(c(0,2,1,0), 2),
nsim = 1,
pi = "estimated",
message = F)
iter <- 100
mat <- c(0,2,1,0)
rm(list=ls()[-c(2,3,22,14,17)])
