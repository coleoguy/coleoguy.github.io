foo <- full.auto[150000:155000,]
View(foo)
foo <- full.auto[250000:255000,]
View(foo)
foo <- full.auto[250000:250100,]
View(foo)
fit.r <- as.data.frame(matrix(NA, 0, 2))
colnames(fit.r) <- c("female.fit", "male.fit")
i <- 1
View(foo)
i <- 2
s <- foo$s[i]
h <- foo$h.mal.ben[i]
foo$r[i] == .5
foo$freqA[i]
# p is male benefit allele the frequency recorded in Y and A columns
if(foo$r[i] == .5){
px <- py <- foo$freqA[i]
}else{
px <- foo$freqX[i]
py <- foo$freqY[i]
}
# get frequencies
# m for male f for female 1 for p 2 for q
m11 <- py*px
m12 <- py*(1-px) + (1-py)*px
m22 <- (1-py) * (1-px)
.166+.483+.35
f11 <- px*px
f12 <- 2 * px * (1-px)
f22 <- (1-px) * (1-px)
# get fitnesses
# male fitnesses are naturally normalized to 1
wm11 <- 1
wm12 <- 1 / (1 + h*s)
wm22 <- 1 / (1 + s)
# female fitnesses are normalized to 1
wf11 <- 1 / (1 + s)
wf12 <- (1 + h * s) / (1 + s)
wf22 <- (1 + s) / (1 + s)
m11*wm11 + m12*wm12 + m22*wm22
f11*wf11 + f12*wf12 + f22*wf22
# function to return male and female fitness from XY model results
GetSexFitness <- function(foo){
fit.r <- as.data.frame(matrix(NA, 0, 2))
colnames(fit.r) <- c("female.fit", "male.fit")
for(i in 1:nrow(foo)){
if(i %% 5000 == 0) print(i)
s <- foo$s[i]
h <- foo$h.mal.ben[i]
# p is male benefit allele the frequency recorded in Y and A columns
if(foo$r[i] == .5){
px <- py <- foo$freqA[i]
}else{
px <- foo$freqX[i]
py <- foo$freqY[i]
}
# get frequencies
# m for male f for female 1 for p 2 for q
m11 <- py*px
m12 <- py*(1-px) + (1-py)*px
m22 <- (1-py) * (1-px)
f11 <- px*px
f12 <- 2 * px * (1-px)
f22 <- (1-px) * (1-px)
# get fitnesses
# male fitnesses are naturally normalized to 1
wm11 <- 1
wm12 <- 1 / (1 + h*s)
wm22 <- 1 / (1 + s)
# female fitnesses are normalized to 1
wf11 <- 1 / (1 + s)
wf12 <- (1 + h * s) / (1 + s)
wf22 <- (1 + s) / (1 + s)
avg.wm <- m11*wm11 + m12*wm12 + m22*wm22
avg.wf <- f11*wf11 + f12*wf12 + f22*wf22
fit.r[i, 1] <- avg.wf
fit.r[i, 2] <- avg.wm
}
final.results <- data.frame(foo, fit.r)
return(final.results)
}
bar <- GetSexFitness(foo)
View(bar)
unique(full.auto$r)
range(full.auto$freqA)
range(full.auto$s)
range(full.auto$h)
source('~/Desktop/Dropbox/gitrepos/sex.bias/rscripts/functions/HB.add fitnesses.R')
load("~/Desktop/Dropbox/gitrepos/sex.bias/results/full.auto.RData")
# function to return male and female fitness from XY model results
GetSexFitness <- function(foo){
fit.r <- as.data.frame(matrix(NA, 0, 2))
colnames(fit.r) <- c("female.fit", "male.fit")
for(i in 1:nrow(foo)){
if(i %% 5000 == 0) print(i)
s <- foo$s[i]
h <- foo$h.mal.ben[i]
# p is male benefit allele the frequency recorded in Y and A columns
if(foo$r[i] == .5){
px <- py <- foo$freqA[i]
}else{
px <- foo$freqX[i]
py <- foo$freqY[i]
}
# get frequencies
# m for male f for female 1 for p 2 for q
m11 <- py*px
m12 <- py*(1-px) + (1-py)*px
m22 <- (1-py) * (1-px)
f11 <- px*px
f12 <- 2 * px * (1-px)
f22 <- (1-px) * (1-px)
# get fitnesses
# male fitnesses are naturally normalized to 1
wm11 <- 1
if(foo$h.mal.ben[i] != 99){
wm12 <- 1 / (1 + h*s)
}else{
wm12 <- 1 / (1 + s)
}
wm22 <- 1 / (1 + s)
# female fitnesses are normalized to 1
wf11 <- 1 / (1 + s)
if(foo$h.mal.ben[i] != 99){
wf12 <- (1 + h * s) / (1 + s)
}else{
wf12 <- 1 / (1 + s)
}
wf22 <- (1 + s) / (1 + s)
avg.wm <- m11*wm11 + m12*wm12 + m22*wm22
avg.wf <- f11*wf11 + f12*wf12 + f22*wf22
fit.r[i, 1] <- avg.wf
fit.r[i, 2] <- avg.wm
}
final.results <- data.frame(foo, fit.r)
return(final.results)
}
full.results <- GetSexFitness(full.auto)
unique(full.results$com.sex)
colnames(full.results)
full.results <- full.results[,-c(12,13)]
ls()
rm(full.auto)
rm(GetSexFitness())
rm(GetSexFitness
)
save.image("~/Desktop/Dropbox/gitrepos/sex.bias/results/full.auto.RData")
library(ggraptR)
ggraptR(full.results)
results <- data.frame(c(full.results$female.fit.1, full.results$male.fit.1),
c(rep("female", 416000), rep("female", 416000)),
rep(full.results$com.num, times=2),
rep(full.results$OSR, times=2),
rep(full.results$s, times=2),
rep(full.results$h.mal.ben, times=2))
ggraptR(results)
results <- data.frame(c(full.results$female.fit.1, full.results$male.fit.1),
c(rep("female", 416000), rep("male", 416000)),
rep(full.results$com.num, times=2),
rep(full.results$OSR, times=2),
rep(full.results$s, times=2),
rep(full.results$h.mal.ben, times=2))
colnames(results) <- c("fitness", "sex", "com.num","OSR","s","h")
ggraptR(results)
strong.sel <- results[results$s==.9, ]
unique(results$sex)
unique(results$s)
weak.sel <- results[results$s==.1, ]
ggraptR(strong.sel)
ggraptR(weak.sel)
4*7*1*4*4
version$version.string
library(devtools)
install.packages("devtools")
library(devtools)
install_github('coleoguy/evobir', build_vignettes = T)
install.packages("knitr")
install_github('coleoguy/evobir', build_vignettes = T)
install_github('coleoguy/chromePlus')
install_github('coleoguy/SAGA2')
help(pretty)
shiny::runApp('Desktop/foobar')
runApp('Desktop/foobar')
shiny::runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
runApp('Desktop/foobar')
plot(1:10)
help("plot")
4 + 5
4 + 5
4**2
x <- 3
x <- "Don"
x <- T
x <- TRUE
x <- c(TRUE, F, F, T, F)
x <- c(TRUE, F, F, "don", F)
x <- c(TRUE, F, 15, "don", F)
a <- 1:10
b <- 1:10
c <- 21:30
z <- cbind(a,b,c)
a <- 1:10
b <- 1:10
c <- 21:30
z <- cbind(a,b,c)
z <- matrix(1:12, 4, 3)
View(z)
z <- matrix(1:12, 4, 3)
z[2, 3]
View(z)
z[2, 3] <- "bob"
a <- 1:3
b <- 1:3
c <- c("Jen", "Bob", "Darwin")
z <- data.frame(a,b,c)
d <- c(T,F,T)
z <- data.frame(a,b,c,d)
View(z)
z[,3]
z[,2]
z[,4]
bar <- list(a,b,c, z)
foo <- matrix(1:50, 5,10, byrow=T)
foo <- matrix(1:50, 5, 10, byrow=T)
View(foo)
for(i in 1:10){
print(i)
}
3 == 0
3 != 0
if(
3 == 0
koala <- rnorm(n=1000, mean=.3 sd=.05)
koala <- rnorm(n=1000, mean=.3, sd=.05)
koala <- rnorm(n=1000, sd=.05, mean=.3)
koala1 <- rnorm(n=1000, mean=.3, sd=.05)
koala2 <- rnorm(n=1000, sd=.05, mean=.3)
plot(density(koala1))
lines(density(koala2),col="red")
plot(density(koala1))
lines(density(koala2),col="red")
koala1 <- rnorm(n=1000, .3, .05)
koala2 <- rnorm(n=1000, .05, .3)
plot(density(koala1), xlim=c(0,2))
lines(density(koala2),col="red")
plot(density(koala1), xlim=c(-1,2))
lines(density(koala2),col="red")
plot(density(koala1), xlim=c(-1,1.3))
lines(density(koala2),col="red")
10%%3
4 ^ 2
# to access items in a vector we use square brackets [ ]
x <- 1:10
# if we have some vectors we want to combine into a matrix we can
# use the commands rbind or cbind to bind the vectors together by
# rows or by columns
a <- 1:10
b <- 31:40
c <- 101:110
x <- cbind(a,b,c)
x <- rbind(a, b, c)
# if we want to access certain parts of our matrix we use square brackets [ ]
x[1, 3] # this gives us the first row and third column
# we use the same approach to store new data
x[1, 3] <- 500
# just like we saw with vectors if we try to put a different type of
# data in this we will find that R changes all the data to match
x[2, 1] <- "jenny"
x
# to  make a dataframe we use the command data.frame
a <- 1:10
b <- rep(T, 10) # the rep command replicates T ten times in this case
c <- rep("Abbi") # here rep replicates "abbi" ten times
x <- data.frame(a, b, c)
x
x[,3]
as.character(x[,3])
5 %in% c(1, 2, 3, 6, 8, 23)
8 %in% c(1, 2, 3, 6, 8, 23)
# if will run code only if its argument is true
for(i in 1:10){
if(i %% 2 == 0){
print(i)
}
}
# while will run code till its argument is false
# lets use it to find the first number that is divisible by 3, 7 and 13
looking <- TRUE
counter <- 1
while(looking){
if(counter %% 13 == 0){
if(counter %% 7 == 0){
if(counter %% 3 == 0){
print(counter)
looking <- FALSE
}
}
}
counter <- counter + 1
}
273/3
273/7
273/13
# while will run code till its argument is false
# lets use it to find the first number that is divisible by 3, 7 and 17
looking <- TRUE
counter <- 1
while(looking){
if(counter %% 17 == 0){
if(counter %% 7 == 0){
if(counter %% 3 == 0){
print(counter)
looking <- FALSE
}
}
}
counter <- counter + 1
}
koala1 <- rnorm(n=1000, mean=.3, sd=.05)
plot(density(koala1), xlim=c(-1,1.3))
plot(density(koala1))
# here is an example of the poisson distribution
koala.sightings <- rpois(100, lambda=3)
hist(koala.sightings)
scale.int <- rexp(100, rate=2)
scale.int <- rexp(100, rate=.1)
scale.int <- rpois(100, lambda=45)
scale.int <- rpois(1000, lambda=45)
hist(scale.int)
scale.int <- round(rexp(1000, lambda=45))
scale.int <- round(rexp(1000, .1))
hist(scale.int)
scale.int <- round(rexp(100, .1))
scale.int <- c()
scale.int <- c()
for(i in 1:100){
scale.int[i] <- mean(round(rexp(100, .1)))
}
hist(scale.int)
for(i in 1:10000){
scale.int[i] <- mean(round(rexp(100, .1)))
}
hist(scale.int)
for(i in 1:100000){
scale.int[i] <- mean(round(rexp(100, .1)))
}
hist(scale.int)
mean(scale.int)
hist(scale.int)
hist(scale.int)
# trying to show what we talked about
heath <- c()
for(i in 1:100000){
heath[i] <- mean(round(rexp(100, .1)))
}
hist(heath)
for(i in 20:80){
x <- i / 5
print(x)
}
install.packages(ggraptR)
install.packages("ggraptR")
x <- matrix(0,100,3000)
x <- matrix(0,100,3000)
for(i in 1:100){
for(j in 2:3000){
x[i,j] <- x[i,(j-1)] + rnorm(1, mean=0.001, sd=0.00001)
}
}
plot(x[1,], type="l")
x <- matrix(3,100,3000)
for(i in 1:100){
for(j in 2:3000){
x[i,j] <- x[i,(j-1)] + rnorm(1, mean=0, sd=0.001)
}
}
plot(x[1,], type="l")
plot(colMeans(x), type="l")
x <- matrix(3,500,3000)
for(i in 1:500){
print(i)
for(j in 2:3000){
x[i,j] <- x[i,(j-1)] + rnorm(1, mean=0, sd=0.001)
}
}
plot(colMeans(x), type="l")
plot(colMeans(x), type="l",ylim=c(2,4))
plot(colMeans(x), type="l",ylim=c(2.5,3.4))
plot(colMeans(x), type="l",ylim=c(2.7,3.2))
plot(colMeans(x), type="l",ylim=c(2.9,3.1))
nrow(x)
sd(x[,i])
qnorm(0.975)*sd(x[,i])/sqrt(nrow(x))
lower<- upper <- avg <- c()
for(i in 1:ncol(x)){
avg[i] <- mean(x[,i])
error <- qnorm(0.975)*sd(x[,i])/sqrt(nrow(x))
lower[i] <- avg[i] - error
upper[i] <- avg[i] + error
}
dat <- cbind(avg,lower,upper)
dat <- cbind(gens, avg,lower,upper)
gens<-1:3000
dat <- cbind(gens, avg,lower,upper)
p<-ggplot(data=dat, aes(x=gens, y=avg) + geom_line()
ggplot(data=dat, aes(x=gens, y=avg)) + geom_line()
library(ggplot2)
ggplot(data=dat, aes(x=gens, y=avg)) + geom_line()
dat <- as.data.frame(cbind(gens, avg,lower,upper))
ggplot(data=dat, aes(x=gens, y=avg)) + geom_line()
p<-ggplot(data=dat, aes(x=gens, y=avg)) + geom_line()
p<-p+geom_ribbon(aes(ymin=data$lower, ymax=data$upper), linetype=2, alpha=0.1)
p
ggplot(data=dat, aes(x=gens, y=avg)) + geom_line()
+geom_ribbon(aes(ymin=data$lower, ymax=data$upper), linetype=2, alpha=0.1)
ggplot(data=dat, aes(x=gens, y=avg)) + geom_line() +
geom_ribbon(aes(ymin=data$lower, ymax=data$upper), linetype=2, alpha=0.1)
ggplot(data=dat, aes(x=gens, y=avg)) + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1)
2/100
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/hw-labs")
# problem set 5 my approach
horns <- read.csv("horns.csv")
View(horns)
t.test(x = horns[1:25,1],
y = horns[26:50,1])
t.test(x = horns[1:25,1],
y = horns[26:50,1], alternative = "greater")
# problem 2
grasshopper <- read.csv("grasshopper.csv")
t.test(x = horns[1:25,1],
y = horns[26:50,1], alternative = "greater")
t.test(x = horns[1:25,1],
y = horns[26:50,1])
# initial vs postcrush
t.test(grasshopper$precrush,grasshopper$postcrush)
# initial vs postcrush
t.test(grasshopper$precrush,grasshopper$postcrush, paired = T)
t.test(grasshopper$postcrush, grasshopper$recovered paired = T)
t.test(grasshopper$postcrush, grasshopper$recovered, paired = T)
grasshopper$postcrush
grasshopper$recovered
t.test(grasshopper$recovered, grasshopper$recrush, paired = T)
library(beeswarm)
beeswarm(grasshopper)
beeswarm(grasshopper, col="green")
beeswarm(grasshopper, col="darkgreen")
beeswarm(grasshopper, col="darkgreen", pch=16)
beeswarm(grasshopper, col="darkgreen", pch=16, ylab="range of motion")
t.test(x = horns[1:25,1],
y = horns[26:50,1])
barplot(colMeans(grasshopper))
dbinom(1,3,.05)
dbinom(1,3,.05/3)
dbinom(2,3,.05/3)
dbinom(3,3,.05/3)
t.test(grasshopper$precrush,
grasshopper$postcrush,
paired = T,
alternative="greater")
t.test(grasshopper$precrush,
grasshopper$postcrush,
paired = T,
alternative="less")
help(t.test)
t.test(grasshopper$precrush,
grasshopper$postcrush,
paired = T,
alternative="less")
t.test(grasshopper$postcrush,
grasshopper$precrush,
paired = T,
alternative="greater")
foo <- vector(length=0)
bar <- c()
foo==bar
length(bar)
length(bar)
length(foo)
foo[1]
bar[1]
foo[1]  <- "heath"
bar[1] <- "heath"
bar[2] <- "blackmon"
bar[20] <- "jen"
bar
foo <- vector(length=0, mode="numeric")
