sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
results<-vector()
for(i in 1:1000){
x <- rnorm(1000)
x <- c(x, rnorm(10, mean=1))
results[i] <- shapiro.test(x)$p.value
}
sum(results<.05)
lm(x~y)
x<- rnorm(100)
y<- rnorm(100)
lm(x~y)
summary(lm(x~y))
x <- rnorm(10, mean=1)
y <- rnorm(10, mean=1.5)
t.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.5)
t.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=2)
t.test(x, y)
wilcox.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=2)
t.test(x, y)
wilcox.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=2)
t.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.5)
t.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.5)
t.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.75)
t.test(x, y)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.75)
t.test(x, y)
set.seed(1)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.5)
t.test(x, y)
set.seed(1)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.5)
t.test(x, y)
set.seed(1)
x <- rnorm(25, mean=1)
y <- rnorm(25, mean=1.5)
t.test(x, y)
set.seed(1)
x <- rnorm(25, mean=1)
y <- rnorm(25, mean=1.5)
t.test(x, y)
wilcox.test(x, y)
set.seed(1)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
wilcox.test(x, y)
set.seed(1)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
wilcox.test(x, y)
set.seed(2)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
set.seed(3)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
wilcox.test(x, y)
set.seed(4)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
set.seed(5)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
set.seed(6)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
set.seed(7)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
set.seed(8)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
wilcox.test(x, y)
set.seed(9)
x <- rnorm(30, mean=1)
y <- rnorm(30, mean=1.5)
t.test(x, y)
wilcox.test(x, y)
set.seed(9)
x <- rnorm(10, mean=1)
y <- rnorm(10, mean=1.5)
t.test(x, y)
wilcox.test(x, y)
set.seed(9)
x <- rnorm(100, mean=1)
y <- rnorm(100, mean=1.25)
t.test(x, y)
wilcox.test(x, y)
set.seed(9)
x <- rnorm(100, mean=1, sd=2)
y <- rnorm(100, mean=1.25, sd=2)
t.test(x, y)
wilcox.test(x, y)
set.seed(9)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.25)
t.test(x, y)
wilcox.test(x, y)
set.seed(9)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.25)
t.test(x, y)
wilcox.test(x, y)
set.seed(8)
x <- rnorm(20, mean=1)
y <- rnorm(20, mean=1.25)
t.test(x, y)
wilcox.test(x, y)
binom.test(x=7, n=14)
binom.test(x=7, n=14, p=.1)
binom.test(x=4, n=14, p=.5)
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/hw-labs/data")
crickets <- read.csv("crickets.csv")
crickets$feedingStatus
crickets$timeToMating
tapply(crickets$timeToMating, crickets$feedingStatus, mean)
help(tapplu)
help(tapply)
tapply(X = sample(crickets$timeToMating, replace = F),
INDEX = crickets$feedingStatus,
FUN = mean)
tapply(X = sample(crickets$timeToMating, replace = F),
INDEX = crickets$feedingStatus,
FUN = mean)
tapply(X = sample(crickets$timeToMating, replace = F),
INDEX = crickets$feedingStatus,
FUN = mean)
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
perm <- 1000
diff.means <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
diff.means[i] <- perm.vals[1] - perm.vals[2]
}
plot(diff.means)
hist(diff.means)
abline(v=obs.vals[1]-obs.vals[2])
plot(density(diff.means))
abline(v=obs.vals[1]-obs.vals[2])
abline(v=obs.vals[1]-obs.vals[2], col="red")
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 1000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 1000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 1000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 1000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 1000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 1000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 1000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d > obs.d)/perm
sum(perm.d > obs.d)/perm
sum(perm.d > obs.d)/perm
sum(perm.d > obs.d)/perm
sum(perm.d > obs.d)/perm
sum(perm.d > obs.d)/perm
sum(perm.d > obs.d)/perm
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d > obs.d)/perm
t.test(crickets$timeToMating~crickets$feedingStatus)
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[1] - perm.vals[2]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d > obs.d)/perm
sum(perm.d > obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[1]-obs.vals[2]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d > obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[2]-obs.vals[1]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d > obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[2]-obs.vals[1]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d < obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[2]-obs.vals[1]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d < obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[2]-obs.vals[1]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d < obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[2]-obs.vals[1]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d < obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[2]-obs.vals[1]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d < obs.d)/perm * 2
crickets <- read.csv("crickets.csv")
obs.vals <- tapply(X = crickets$timeToMating,
INDEX = crickets$feedingStatus,
FUN = mean)
obs.d <- obs.vals[2]-obs.vals[1]
perm <- 10000
perm.d <- vector()
for(i in 1:perm){
newX <- sample(crickets$timeToMating, replace = F)
perm.vals <- tapply(X = newX,
INDEX = crickets$feedingStatus,
FUN = mean)
perm.d[i] <- perm.vals[2] - perm.vals[1]
}
plot(density(perm.d))
abline(v=obs.d, col="red")
sum(perm.d < obs.d)/perm * 2
