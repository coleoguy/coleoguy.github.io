dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
# does the data look like something might be there
mean(x) - mean(y)
# FOR THEM write a loop where you randomize the
# association between feeding status and time to mating
# and then calculate the difference in the two states
sim.stat <- c()
new.data <- dat
for(i in 1:100000){
new.data$timeToMating <- sample(new.data$timeToMating)
sim.stat[i] <- mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
}
# What does the null distribution look like
# Describe in words what this null is?
# The expected values of our statistic if feeding status
# has no relationship (direct or indirect) with time to mating
sum(sim.stat < mean(x)-mean(y))/100000
# What does the null distribution look like
hist(sim.stat)
# FOR THEM write a loop where you randomize the
# association between feeding status and time to mating
# and then calculate the difference in the two states
sim.stat <- c()
new.data <- dat
for(i in 1:100000){
new.data$timeToMating <- sample(new.data$timeToMating)
sim.stat[i] <- mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
}
# What does the null distribution look like
hist(sim.stat)
mean(x)-mean(y)
# get the data into R
dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
# does the data look like something might be there
diff <- hist(dat[1:11,2]) - hist(dat[12:24,2])
# FOR THEM write a loop where you randomize the
# association between feeding status and time to mating
# and then calculate the difference in the two states
sim.stat <- c()
new.data <- dat
for(i in 1:100000){
new.data$timeToMating <- sample(new.data$timeToMating)
sim.stat[i] <- mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
}
# What does the null distribution look like
hist(sim.stat)
# Describe in words what this null is?
# The expected values of our statistic if feeding status
# has no relationship (direct or indirect) with time to mating
sum(sim.stat < diff)/100000
dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
# does the data look like something might be there
diff <- mean(hist(dat[1:11,2])) - mean(hist(dat[12:24,2]))
# FOR THEM write a loop where you randomize the
# association between feeding status and time to mating
# and then calculate the difference in the two states
sim.stat <- c()
new.data <- dat
for(i in 1:100000){
new.data$timeToMating <- sample(new.data$timeToMating)
sim.stat[i] <- mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
}
# What does the null distribution look like
hist(sim.stat)
# Describe in words what this null is?
# The expected values of our statistic if feeding status
# has no relationship (direct or indirect) with time to mating
sum(sim.stat < diff)/100000
diff
# get the data into R
dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
# does the data look like something might be there
diff <- mean(dat[1:11,2]) - mean(dat[12:24,2])
# FOR THEM write a loop where you randomize the
# association between feeding status and time to mating
# and then calculate the difference in the two states
sim.stat <- c()
new.data <- dat
for(i in 1:100000){
new.data$timeToMating <- sample(new.data$timeToMating)
sim.stat[i] <- mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
}
# What does the null distribution look like
hist(sim.stat)
# Describe in words what this null is?
# The expected values of our statistic if feeding status
# has no relationship (direct or indirect) with time to mating
sum(sim.stat < diff)/100000
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
hist(dat[12:24,2])
dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
hist(dat[1:11,2])
# get the data into R
dat <- read.csv("crickets.csv")
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
# does the data look like something might be there
diff <- mean(dat[1:11,2]) - mean(dat[12:24,2])
# FOR THEM write a loop where you randomize the
# association between feeding status and time to mating
# and then calculate the difference in the two states
sim.stat <- c()
new.data <- dat
for(i in 1:100000){
new.data$timeToMating <- sample(new.data$timeToMating)
sim.stat[i] <- mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
}
# What does the null distribution look like
hist(sim.stat)
sum(sim.stat < diff)/100000
# what is the probability that difference would be this big/small/extreme
# they have a lot of trouble understanding 1-sided two sided so go through each
# maybe also show how you can reflect the null
hist(abs(sim.stat))
abline(v=abs(diff),col="red")
shiny::runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
x <- runif(20, min=-10, max=10)
y <- rnorm(mean=x, sd=1)
plot(y~x)
y <- rnorm(20, mean=x, sd=1)
plot(y~x)
y <- rnorm(20, mean=x, sd=5)
plot(y~x)
y <- rnorm(20, mean=x, sd=10)
plot(y~x)
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
13/88
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
install.packages("cowplot")
runApp('~/Desktop/app/cov')
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/data.files")
# get the data into R
dat <- read.csv("crickets.csv")
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
View(dat)
hist(dat[1:11,2])
hist(dat[12:24,2])
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
# does the data look like something might be there
diff <- mean(dat[1:11,2]) - mean(dat[12:24,2])
new.data$timeToMating
new.data <- dat
new.data$timeToMating
View(dat)
sample(new.data$timeToMating)
new.data$timeToMating <- sample(new.data$timeToMating)
mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
sim.stat <- c()
new.data <- dat
for(i in 1:100000){
new.data$timeToMating <- sample(new.data$timeToMating)
sim.stat[i] <- mean(new.data$timeToMating[1:11]) -
mean(new.data$timeToMating[12:24])
}
# What does the null distribution look like
hist(sim.stat)
# what is the probability that difference would be this big/small/extreme
# they have a lot of trouble understanding 1-sided two sided so go through each
# maybe also show how you can reflect the null
hist(abs(sim.stat))
# what is the probability that difference would be this big/small/extreme
# they have a lot of trouble understanding 1-sided two sided so go through each
# maybe also show how you can reflect the null
hist(abs(sim.stat))
abline(v=abs(diff),col="red")
sum(abs(sim.stat) >= abs(diff))/length(sim.stat)
# have them do a t-test of whether feeding status
# time to mating
t.test(dat$timeToMating~dat$feedingStatus)
t.test(dat[1:11, 2], dat[12:24, 2])
# look at the way that these data violate the assumption of
# normality that is part of two sample t-test
hist(dat[,2])
hist(dat[1:11,2])
hist(dat[12:24,2])
# does the data look like something might be there
diff <- mean(dat[1:11,2]) - mean(dat[12:24,2])
# What does the null distribution look like
hist(sim.stat)
# what is the probability that difference would be this big/small/extreme
# they have a lot of trouble understanding 1-sided two sided so go through each
# maybe also show how you can reflect the null
hist(abs(sim.stat))
runApp('~/Desktop/app/cov')
library(diversitree)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
sim.character(tree=tree, pars=1,model="bm")
trait1 <- sim.character(tree=tree, pars=1,model="bm")
trait2 <- sim.character(tree=tree, pars=1,model="bm")
plot(trait1,trait2)
cor.test(trait1, trait2)
summary(lm(trait1~trait2))
set.seed(1)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
set.seed(2)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
set.seed(2)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
set.seed(2)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
set.seed(2)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
set.seed(3)
tree <- trees(pars=c(3,1), type="bd", max.taxa = 100)[[1]]
plot(tree, show.tip.label = F)
trait1 <- sim.character(tree=tree, pars=1,model="bm")
plot(tree, show.tip.label = F)
trait1 <- sim.character(tree=tree, pars=1,model="bm")
trait2 <- sim.character(tree=tree, pars=1,model="bm")
plot(trait1,trait2)
cor.test(trait1, trait2)
summary(lm(trait1~trait2))
library(ape)
pic(trait1, tree)
pic2 <- pic(trait2, tree)
pic1 <- pic(trait1, tree)
pic2 <- pic(trait2, tree)
cor.test(trait1, trait2)
plot(pic1~pic2)
cor.test(pic1, pic2)
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
help(geom_rect)
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
d=data.frame(x1=c(1,3,1,5,4),
x2=c(2,4,3,6,6),
y1=c(1,1,4,1,3),
y2=c(2,2,5,3,5),
t=c('a','a','a','b','b'),
r=c(1,2,3,4,5))
ggplot() +
scale_x_continuous(name="x") +
scale_y_continuous(name="y") +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), color="black", alpha=0.5) +
geom_text(data=d, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=r), size=4) +
opts(title="geom_rect", plot.title=theme_text(size=40, vjust=1.5))
ggplot() +
scale_x_continuous(name="x") +
scale_y_continuous(name="y") +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), color="black", alpha=0.5) +
geom_text(data=d, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=r), size=4)
ggplot() +
scale_x_continuous(name="x") +
scale_y_continuous(name="y") +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), color="black", alpha=0.5)
ggplot() +
scale_x_continuous(name="x") +
scale_y_continuous(name="y") +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), alpha=0.5)
ggplot() +
scale_x_continuous(name="x") +
scale_y_continuous(name="y") +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), alpha=0.1)
ggplot() +
scale_x_continuous(name="x") +
scale_y_continuous(name="y") +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), alpha=0.1) +
theme_bw()
ggplot() +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), alpha=0.1) +
theme_bw()
d=data.frame(x1=c(1,3,1,5,4),
x2=c(2,4,3,6,6),
y1=c(1,1,4,1,3),
y2=c(2,2,5,3,5),
t=c('a','a','a','b','b'))
ggplot() +
geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), alpha=0.1) +
theme_bw()
x <- runif(200, min=80, max=88)
y <- rnorm(200, mean=x*.147, sd=1)
dat <- data.frame(x, y)
dat <- dat[1:4,]
View(dat)
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
x <- runif(200, min=80, max=88)
y <- rnorm(200, mean=x*.147, sd=1)
dat <- data.frame(x, y)
colnames(dat) <- c("Sperm", "Lysozyme")
ymean <- mean(dat[,2])
xmean <- mean(dat[,1])
x1 <- x2 <- y1 <- y2 <- cl <- c()
for(i in 1:nrow(dat)){
if(dat[i,1] < xmean){
x1[i] <- dat[i,1]
x2[i] <- xmean
}else{
x1[i] <- xmean
x2[i] <- dat[i,1]
}
if(dat[i,2] < ymean){
y1[i] <- dat[i,2]
y2[i] <- ymean
}else{
y1[i] <- ymean
y2[i] <- dat[i,2]
}
if(dat[i,1] > xmean & dat[i,2] > ymean){
cl[i] <- "blue"
}
if(dat[i,1] < xmean & dat[i,2] < ymean){
cl[i] <- "blue"
}
if(dat[i,1] > xmean & dat[i,2] < ymean){
cl[i] <- "red"
}
if(dat[i,1] < xmean & dat[i,2] > ymean){
cl[i] <- "red"
}
}
dat <- data.frame(dat, x1, x2, y1, y2, cl)
View(dat)
runApp('~/Desktop/app/cov')
T & T
T & F
T ==T
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
abs((dat$x1-dat$x2) * (dat$y1-dat$y2))
abs((dat$x1-dat$x2) * (dat$y1-dat$y2))
dat$x1-dat$x2
c(1,3,2) * c(2,-1,2)
sum(c(1,2,3))
x <- runif(200, min=80, max=88)
y <- rnorm(200, mean=x*.147, sd=1)
dat <- data.frame(x, y)
colnames(dat) <- c("Sperm", "Lysozyme")
ymean <- mean(dat[,2])
xmean <- mean(dat[,1])
x1 <- x2 <- y1 <- y2 <- shade <- c()
for(i in 1:nrow(dat)){
if(dat[i,1] < xmean){
x1[i] <- dat[i,1]
x2[i] <- xmean
}else{
x1[i] <- xmean
x2[i] <- dat[i,1]
}
if(dat[i,2] < ymean){
y1[i] <- dat[i,2]
y2[i] <- ymean
}else{
y1[i] <- ymean
y2[i] <- dat[i,2]
}
if((dat[i,1] > xmean) == (dat[i,2] > ymean)){
shade[i] <- "positive"
}
if((dat[i,1] > xmean) != (dat[i,2] > ymean)){
shade[i] <- "negative"
}
}
dat <- data.frame(dat, x1, x2, y1, y2, shade)
areas <- abs((dat$x1-dat$x2) * (dat$y1-dat$y2))
posarea <- sum(areas[dat$shade == "positive"])
negarea <- sum(areas[dat$shade == "negative"])
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp()
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp()
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
View(d)
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
ggplot() +
theme_bw() +
geom_rect(data=d,
mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=sign),
alpha=0.3) +
geom_text(x=1, y=1, label="test")
ggplot()
plot2 <- ggplot() +
theme_bw() +
geom_rect(data=d,
mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=sign),
alpha=0.3) +
geom_text(x=1, y=1, label="test")
runApp('~/Desktop/app/cov')
help(geom_text)
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
help(annotate)
runApp('~/Desktop/app/cov')
runApp('~/Desktop/app/cov')
x <- rnorm(100)
hist(x)
x <- rnorm(1000)
hist(x)
hist(0:100/100)
