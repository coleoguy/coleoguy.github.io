plot(drs$Start_Position~drs$Match_Position)
10^8
hist(drs$Match_Position-drs$Start_Position)
hist(shuffled_drs$Match_Position-shuffled_drs$Start_Position)
hist(shuffled_drs$Shuffled_End - shuffled_drs$Shuffled_Match_Start)
hist(shuffled_drs$Shuffled_Match_Start - shuffled_drs$Shuffled_End)
hist(shuffled_drs$Shuffled_Match_Start - shuffled_drs$Shuffled_Start)
# Install and load the required packages
library(data.table)
library(rtracklayer)
View(shuffled_drs)
help(import)
# Load files
gffData <- read.table("./gff/genomic.gff")
# Load files
gffData <- read.table("genomic.gff")
# Load files
gffData <- read.table("genomic (1).gff")
# Load files
gffData <- read.table("genomic (1).gff")
help(read.table)
# Load files
gffData <- read.table("genomic (1).gff", sep=" ")
# Load files
gffData <- read.delim("genomic (1).gff")
View(gffData)
# Load files
gff <- read.delim("genomic (1).gff")
# Load files
gff <- read.delim("genomic (1).gff", header=F)
View(gff)
# keep exons
gff <- gff[gff$V3 == "exon",]
# Load files
gff <- read.delim("genomic (1).gff", header=F)
# keep exons
gff <- gff[gff$V3 == "exon",]
drs <- fread("aegypti_drs.csv")
View(drs)
unique(gff$V1)
# fix chromosome names
gff$V1[gff$V1 == "NC_035107.1"] <- 1
gff$V1[gff$V1 == "NC_035108.1"] <- 2
gff$V1[gff$V1 == "NC_035109.1"] <- 3
gff <- gff[gff$V1 %in% 1:3,]
gff$V1[gff$V1 == "NC_035107.1"] <- 1
gff$V1[gff$V1 == "NC_035108.1"] <- 2
gff$V1[gff$V1 == "NC_035109.1"] <- 3
gff <- gff[gff$V1 %in% 1:3, ]
View(gff)
View(drs)
drs <- read.csv("aegypti_drs.csv")
# Load files
gff <- read.delim("genomic (1).gff", header=F)
# keep exons
gff <- gff[gff$V3 == "exon",]
# fix chromosome names
gff$V1[gff$V1 == "NC_035107.1"] <- 1
gff$V1[gff$V1 == "NC_035108.1"] <- 2
gff$V1[gff$V1 == "NC_035109.1"] <- 3
gff <- gff[gff$V1 %in% 1:3, ]
drs <- read.csv("aegypti_drs.csv")
# create column for holding flanked exons
drs$exon <- NA
View(drs)
i <- 1
drs$Start_Position[i]
drs$Match_End_Position[i]
View(gff)
intersect(x=c(1,2,3,4,5), y=c(2,4,6,8,10))
help(intersect)
intersect(intersect(x,y),z)
x <- gff$V1 == 1
y <- drs$Start_Position[i] < gff$V5 # end of exon has to be after start of repeat
z <- drs$Match_End_Position[i] < gff$V4 # begining of exon has to be before the end of the repeat
intersect(intersect(x,y),z)
intersect(x,y)
x <- which(gff$V1 == 1)
x <- which(gff$V1 == 1)
y <- which(drs$Start_Position[i] < gff$V5) # end of exon has to be after start of repeat
z <- which(drs$Match_End_Position[i] < gff$V4) # begining of exon has to be before the end of the repeat
intersect(intersect(x,y),z)
y <- which(gff$V5 > drs$Start_Position[i]) # end of exon has to be after start of repeat
y <- which(gff$V5 > drs$Start_Position[i]) # end of exon has to be after start of repeat
z <- which(gff$V4 > drs$Match_End_Position[i]) # begining of exon has to be before the end of the repeat
intersect(intersect(x,y),z)
y <- 1:10
z[1:10]
x <- which(gff$V1 == 1)
y <- which(gff$V5 > drs$Start_Position[i]) # end of exon has to be after start of repeat
z <- which(gff$V4 < drs$Match_End_Position[i]) # begining of exon has to be before the end of the repeat
intersect(intersect(x,y),z)
hit <- intersect(intersect(x,y),z)
length(hit)
for(i in 1:nrow(drs)){
if(i%%1000 == 0){
cat(paste(i, "\n"))
}
x <- which(gff$V1 == 1)
y <- which(gff$V5 > drs$Start_Position[i]) # end of exon has to be after start of repeat
z <- which(gff$V4 < drs$Match_End_Position[i]) # begining of exon has to be before the end of the repeat
hit <- intersect(intersect(x,y),z)
if(length(hit>1)){
drs$exon[i] <- gff$V9[hit]
}
}
setwd("~/Desktop")
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("Faculty-Student Numbers.csv")[,-11]
dat <- read.csv("dat.grants.csv")
View(dat)
View(dat)
females <- dat$average[dat$sex == "F")
females <- dat$average[dat$sex == "F"]
males <- dat$average[dat$sex == "M"]
females <- dat$average[dat$sex == "F"]
males <- dat$average[dat$sex == "M"]
obs.diff <- mean(females) - mean(males)
diff <- c()
for(i in 1:1000){
avgs <- dat$average[sample(1:46)]
diff[i] <- mean(avgs[1:15]) - mean(avgs[16:46])
}
plot(density(diff))
plot(density(diff), xlab="diff in avearge numbers of rotating students in female - male labs")
plot(density(diff), xlab="diff in avearge numbers of rotating students in female - male labs")
polygon(density(diff),col=rgb(1,0,0,.5))
plot(density(diff), xlab="diff in avearge numbers of rotating students in female - male labs")
polygon(density(diff),col=rgb(1,0,0,.5))
plot(density(diff), xlab="diff in avearge numbers of rotating students in female - male labs")
polygon(density(diff),col=rgb(1,0,0,.5))
abline(v=obs.diff, lwd=2, col="black")
help(lme)
help(gls)
library(nlme)
help(gls)
install.packages("Matching")
install.packages("matchingR")
dat <- read.csv("students.csv")
View(dat)
View(dat)
colnames(dat) <- c("time","BIOL 111","BIOL 112","BIOL 241","BIOL 242",
"BIOL 319","BIOL 320","BIOL 456","BIOL 457")
View(dat)
sections <- read.csv("sections.csv")
View(dat)
for(i in 1:28){
dat[i,2:9] <- sample(1:8)
}
write.csv(dat, "students.csv", row.names= F)
dat <- read.csv("students.csv")
View(dat)
dat <- read.csv("students.csv")
View(dat)
sections <- read.csv("sections.csv")
# Incoming Ph.D. students to Biology/Microbiology labs (111/112).
# Existing Ph.D. students  (all programs) in Biology Labs
# M.S. thesis students in biology labs
# EEB Students
# Qualified out of department students
biolabs <- which(dat$Department=="Biology")
unique(dat$Program)
# Incoming Ph.D. students to Biology/Microbiology labs (111/112).
# Existing Ph.D. students  (all programs) in Biology Labs
# M.S. thesis students in biology labs
# EEB Students
# Qualified out of department students
biolabs <- which(dat$Department == "Biology" & dat$Program != "Biology / Microbiology M.S.")
View(dat)
dat <- read.csv("students.csv")
View(dat)
colnames(dat)
dat <- read.csv("students.csv")
colnames(dat) <- c("time","BIOL 111","BIOL 112","BIOL 241","BIOL 242",
"BIOL 319","BIOL 320","BIOL 456","BIOL 457")
sections <- read.csv("sections.csv")
View(dat)
dat <- read.csv("students.csv")
colnames(dat) <- c("time","BIOL 111","BIOL 112","BIOL 241","BIOL 242",
"BIOL 319","BIOL 320","BIOL 456","BIOL 457",
"Program", "Department", "overload", "name", "email" )
View(dat)
sections <- read.csv("sections.csv")
# Incoming Ph.D. students to Biology/Microbiology labs (111/112).
# Existing Ph.D. students  (all programs) in Biology Labs
# M.S. thesis students in biology labs
# EEB Students
# Qualified out of department students
biolabs <- which(dat$Department == "Biology" & dat$Program != "Biology / Microbiology M.S.")
bioMSthesis <- which(dat$Program  == "Biology / Microbiology M.S.")
biolabs
eeb <- which(dat$Program == "EEB Ph.D." & dat$Department == "Biology")
eeb <- which(dat$Program == "EEB Ph.D." & dat$Department != "Biology")
# Incoming Ph.D. students to Biology/Microbiology labs (111/112).
# Existing Ph.D. students  (all programs) in Biology Labs
# M.S. thesis students in biology labs
# EEB Students
# Qualified out of department students
biolabs <- which(dat$Department == "Biology" & dat$Program != "Biology / Microbiology M.S.")
bioMSthesis <- which(dat$Program  == "Biology / Microbiology M.S.")
eeb <- which(dat$Program == "EEB Ph.D." & dat$Department != "Biology")
other <- which(dat$Program == "Other")
groups <- list(biolabs, bioMSthesis, eeb, other)
i <- 1
groups[[i]]
sample(10)
sample(x=10, n=1)
sample(x=10, size = =1)
sample(x=10, size =1)
sample(x=10, size =1)
sample(x=10, size =1)
sample(x=10, size =1)
# randomize order af current group
cur <- groups[[i]]
length(cur) > 1
sample(cur)
sample(cur)
sample(cur)
sample(cur)
sample(cur)
sample(cur)
sample(cur)
sample(cur)
sample(cur)
sample(cur)
sample(cur)
dat$optimal <- F
View(dat)
cur
# randomize order af current group
cur <- groups[[i]]
if(length(cur) > 1){
cur <- sample(cur)
}
cur
View(sections)
sections$assigned <- NA
View(sections)
sections <- read.csv("sections.csv")
sections$assigned <- NA
View(sections)
View(dat)
View(dat)
unique(sections$course)
length(unique(sections$course))
# find best for current student
ranking <- dat[cur[i],2:(length(unique(sections$course))+1)]
# find best for current student
ranking <- as.numeric(dat[cur[i],2:(length(unique(sections$course))+1)])
colnames(dat)[cur[i],2:(length(unique(sections$course))+1)]
colnames(dat)[2:(length(unique(sections$course))+1)]
names(ranking) <- colnames(dat)[2:(length(unique(sections$course))+1)]
ranking==1
which(ranking==1)
foo <- sections[sections$course == names(ranking)[curprop]]
curprop <- which(ranking==counter)
# looking for match
looking <- T
counter <- 1
curprop <- which(ranking==counter)
names(ranking)[curprop]
sections$course == names(ranking)[curprop]
curprop <- which(ranking==counter)
foo <- sections[sections$course == names(ranking)[curprop]]
sections
foo <- sections[sections$course == names(ranking)[curprop],]
View(foo)
is.na(foo$assigned)
View(foo)
dat <- read.csv("students.csv")
colnames(dat) <- c("time","BIOL 111","BIOL 112","BIOL 241","BIOL 242",
"BIOL 319","BIOL 320","BIOL 456","BIOL 457",
"Program", "Department", "overload", "name", "email" )
sections <- read.csv("sections.csv")
dat$optimal <- F
sections$assigned <- NA
# Incoming Ph.D. students to Biology/Microbiology labs (111/112).
# Existing Ph.D. students  (all programs) in Biology Labs
# M.S. thesis students in biology labs
# EEB Students
# Qualified out of department students
biolabs <- which(dat$Department == "Biology" & dat$Program != "Biology / Microbiology M.S.")
bioMSthesis <- which(dat$Program  == "Biology / Microbiology M.S.")
eeb <- which(dat$Program == "EEB Ph.D." & dat$Department != "Biology")
other <- which(dat$Program == "Other")
groups <- list(biolabs, bioMSthesis, eeb, other)
i <- 1
# randomize order af current group
cur <- groups[[i]]
if(length(cur) > 1){
cur <- sample(cur)
}
# randomize order af current group
cur <- groups[[i]]
if(length(cur) > 1){
cur <- sample(cur)
}
j <- 1
ranking <- as.numeric(dat[cur[j],2:(length(unique(sections$course))+1)])
ranking <- as.numeric(dat[cur[j],2:(length(unique(sections$course))+1)])
names(ranking) <- colnames(dat)[2:(length(unique(sections$course))+1)]
ranking
setwd("~/Desktop/app")
library(ape)
library(dplyr)
library(phytools)
library(viridis)
##### get data. #########
dat <- read.csv("carnivora.csv", as.is=F)
# in future will come in as input$tax
tax <- "Genus"
# Here that taxonomic order is taken as a column number
# from the data table
index <- which(colnames(dat) == tax)
dat[,index] <- as.character(dat[,index])
counts <- as.data.frame(table(dat[,index]))
N <- counts$Freq
names(N) <- counts$Var1
frm <- reformulate(paste(colnames(dat)[1:index],collapse="/"))
dat_unique <- do.call(rbind, lapply(unique(dat[,index]), function(value) {
dat[dat[,index] == value, ][1, ]
}))
for (i in 1:length(dat_unique[,index])) {
dat_unique$FW[i] <- mean(dat$FW[which(dat[,index] == dat_unique[i,index])])
}
dat_unique[,index] <- as.factor(dat_unique[,index])
tr1 <- as.phylo(frm, data = dat_unique, collapse=TRUE)
tr1$edge.length <- rep(1, nrow(tr1$edge))
tr1 <- force.ultrametric(tr1, method="extend")
tip.label <- tr1$tip.label
clade.label <- tr1$tip.label
tr2 <- multi2di(tr1)
tr2$edge.length[tr2$edge.length==0] <- 0.0001
depth <- sapply(tr2$tip.label, function(x, y) {
0.6 * y$edge.length[which(tr2$edge[, 2] == which(y$tip.label == x))]
}, y = tr2)
N.sort <- c()
for (i in 1:length(tip.label)) {
N.sort[i] <- N[names(N) == tip.label[i]]
}
N.sort <- N.sort*2
names(N.sort) <- tip.label
trans<-data.frame(tip.label,clade.label,N.sort,depth)
tr2 <- phylo.toBackbone(tr2, trans)
shiny::runApp()
runApp('Desktop/app')
runApp('Desktop/app')
runApp('Desktop/app')
install.packages("diversitree")
install.packages("ape")
install.packages("phytools")
install.packages("coda")
install.packages(c("MASS", "nlme", "survival"))
install.packages("devtools")
library(devtools)
install_github('coleoguy/SAGA2')
library(SAGA2)
lin1 <- c(0,0,0,0,0,1,0,0,0,1)
lin2 <- c(1,0,0,0,1,0,0,0,0,0)
rbinom(10, 1)
rbinom(10, 1, .5)
rbinom(1, 10, .5)
p <- .1
rbinom(sum(lin2), 1, .1)
rbinom(sum(lin2), 1, .1)
rbinom(sum(lin2), 1, .1)
lin1 <- c(0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1)
lin2 <- c(1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0)
p <- .1
calc.dmis <- function(lin1, lin2){
dmis <- c()
for(i in 1:length(lin1)){
if(lin1[i] == 1){
dmis[i] <- sum(rbinom(sum(lin2), 1, .1))
}
}
total.dmis <- sum(dmis)
}
calc.dmis(lin1, lin2)
calc.dmis <- function(lin1, lin2){
dmis <- c()
for(i in 1:length(lin1)){
if(lin1[i] == 1){
dmis[i] <- sum(rbinom(sum(lin2), 1, .1))
}
}
total.dmis <- sum(dmis)
return(total.dmis)
}
calc.dmis(lin1, lin2)
p <- .5
calc.dmis <- function(lin1, lin2){
dmis <- c()
for(i in 1:length(lin1)){
if(lin1[i] == 1){
dmis[i] <- sum(rbinom(sum(lin2), 1, .1))
}
}
total.dmis <- sum(dmis)
return(total.dmis)
}
calc.dmis(lin1, lin2)
dmis <- c()
i <- 1
for(i in 1:length(lin1)){
if(lin1[i] == 1){
dmis[i] <- sum(rbinom(sum(lin2), 1, .1))
}
}
dmis
calc.dmis <- function(lin1, lin2){
dmis <- rep(0, length(lin1))
for(i in 1:length(lin1)){
if(lin1[i] == 1){
dmis[i] <- sum(rbinom(sum(lin2), 1, .1))
}
}
total.dmis <- sum(dmis)
return(total.dmis)
}
calc.dmis(lin1, lin2)
calc.dmis(lin1, lin2)
lin1 <- c(0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1)
lin2 <- c(1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0)
p <- .5
calc.dmis(lin1, lin2)
calc.dmis(lin1, lin2)
calc.dmis <- function(lin1, lin2){
dmis1 <- dmis2 <- rep(0, length(lin1))
for(i in 1:length(lin1)){
if(lin1[i] == 1){
dmis1[i] <- sum(rbinom(sum(lin2), 1, .1))
}
if(lin2[i] == 1){
dmis2[i] <- sum(rbinom(sum(lin1), 1, .1))
}
}
total.dmis <- sum(dmis1, dmis2)
return(total.dmis)
}
calc.dmis(lin1, lin2)
x <- matrix(c(23,12,34),1,3)
chisq.test(x)
x <- matrix(c(23,23,34),1,3)
chisq.test(x)
strainA <- runif(100, min = 0, max = 100)
strainB <- runif(100, min = 15, max = 100)
t.test(strainA, StrainB)
t.test(strainA, strainB)
strainB <- runif(100, min = 10, max = 100)
t.test(strainA, strainB)
strainA <- runif(100, min = 0, max = 100)
strainB <- runif(100, min = 10, max = 100)
t.test(strainA, strainB)
obs <- abs(median(strainA) - median(strainB))
null <- c()
for(i in 1:10000){
newsamp <- sample(c(strainA, strainB))
null[i] <- abs(median(newsamp[1:100]) - median(newsamp[101:200]))
}
sum(null >= obs)/length(null)
plot(density(null))
abline(v=obs, col="red",lwd=2)
set.seed(1)
strainA <- runif(100, min = 0, max = 100)
strainB <- runif(100, min = 10, max = 100)
t.test(strainA, strainB)
obs <- abs(median(strainA) - median(strainB))
null <- c()
for(i in 1:10000){
newsamp <- sample(c(strainA, strainB))
null[i] <- abs(median(newsamp[1:100]) - median(newsamp[101:200]))
}
sum(null >= obs)/length(null)
plot(density(null))
abline(v=obs, col="red",lwd=2)
set.seed(1)
strainA <- runif(100, min = 0, max = 90)
strainB <- runif(100, min = 10, max = 100)
t.test(strainA, strainB)
obs <- abs(median(strainA) - median(strainB))
null <- c()
for(i in 1:10000){
newsamp <- sample(c(strainA, strainB))
null[i] <- abs(median(newsamp[1:100]) - median(newsamp[101:200]))
}
sum(null >= obs)/length(null)
plot(density(null))
abline(v=obs, col="red",lwd=2)
set.seed(1)
strainA <- runif(100, min = 0, max = 90)
strainB <- runif(100, min = 10, max = 100)
t.test(strainA, strainB)
obs <- abs(median(strainA) - median(strainB))
#null <- c()
for(i in 1:10000){
newsamp <- sample(c(strainA, strainB))
null[i] <- abs(median(newsamp[1:100]) - median(newsamp[101:200]))
}
set.seed(1)
strainA <- runif(100, min = 0, max = 90)
strainB <- runif(100, min = 10, max = 100)
t.test(strainA, strainB)
obs <- abs(median(strainA) - median(strainB))
#null <- c()
for(i in 1:10000){
newsamp <- sample(c(strainA, strainB))
null <- c(null, abs(median(newsamp[1:100]) - median(newsamp[101:200])))
}
setwd("~/Desktop/github/coleoguy.github.io/teaching/expdes/data")
dat <- read.csv("fights.csv")
cor.test(dat$prefight, dat$postfight)
