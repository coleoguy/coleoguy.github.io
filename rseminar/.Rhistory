# prior with little info
priors <- make.prior.exponential(.5)
# sampled from an mcmc
results.trees[[j]] <- mcmc(con.lik, w=1, prior = priors,
x.init=runif(min=0,max=1,n=3),
nsteps=10)
}
results.orders[[i]] <- results.trees
}
# Heath Blackmon
# 24 August 2018
# Initial model fitting for polyneoptera
source("helper.functions.R")
library(chromePlus)
library(diversitree)
# so after some peaks at the data I think that
# what we see here is very strong support for polyploidy
# but the estimates of descending rate seems a bit unrealistic at best
# lets explore whether this is due to order level variance my
# thought is that heterogeneity across the tree is leading to
# the overall estimates being a bit nonsensical.
source("helper.functions.R")
library(chromePlus)
library(diversitree)
dat <- GetData(trees = "../data/trees/posterior.trees.nex",
data = "../data/chrom.data/chroms.csv")
trees <- read.nexus("../data/trees/posterior.trees.nex")
orders <- unique(dat$order)[c(1,2,3,6,8)]
results.trees <- vector("list", length = 100)
results.orders <- vector("list", length = 5)
names(results.orders) <- orders
for(i in 1:length(orders)){
for(j in 1:100){
dat <- GetData(trees = "../data/trees/posterior.trees.nex",
data = "../data/chrom.data/chroms.csv")
# drop any tips from tree without data
tree <- drop.tip(phy = trees[[j]], tip = dat$species[is.na(dat$haploid)])
# drop all but focus order from tree
tree <- drop.tip(phy = tree, tip = dat$species[dat$order != orders[i]])
# scale to tree unit length
tree$edge.length <- tree$edge.length/max(branching.times(tree))
# create reduced dataset
dat.t <- dat[dat$order == orders[i],]
# track progress
print(paste("working on", orders[i]))
# make the data format for chromePlus
chrom.mat <- datatoMatrix(x = dat.t[!is.na(dat.t$haploid), c(2, 3)],
range = c(range(dat.t$haploid, na.rm = T)[1] - 2,
range(dat.t$haploid, na.rm = T)[2] + 2),
hyper = F)
# get the basic likelihood function
lik <- make.mkn(tree = tree,
states = chrom.mat,
k = ncol(chrom.mat),
strict = F,
control = list(method = "ode"))
# constrain to a biologically realistic model of chrom evolution
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain=list(drop.demi=T))
# prior with little info
priors <- make.prior.exponential(.5)
# sampled from an mcmc
results.trees[[j]] <- mcmc(con.lik, w=1, prior = priors,
x.init=runif(min=0,max=1,n=3),
nsteps=10)
}
results.orders[[i]] <- results.trees
}
# Heath Blackmon
# 24 August 2018
# Initial model fitting for polyneoptera
source("helper.functions.R")
library(chromePlus)
library(diversitree)
# so after some peaks at the data I think that
# what we see here is very strong support for polyploidy
# but the estimates of descending rate seems a bit unrealistic at best
# lets explore whether this is due to order level variance my
# thought is that heterogeneity across the tree is leading to
# the overall estimates being a bit nonsensical.
source("helper.functions.R")
library(chromePlus)
library(diversitree)
dat <- GetData(trees = "../data/trees/posterior.trees.nex",
data = "../data/chrom.data/chroms.csv")
trees <- read.nexus("../data/trees/posterior.trees.nex")
orders <- unique(dat$order)[c(1,2,3,6,8)]
results.trees <- vector("list", length = 100)
results.orders <- vector("list", length = 5)
names(results.orders) <- orders
for(i in 1:length(orders)){
for(j in 1:100){
dat <- GetData(trees = "../data/trees/posterior.trees.nex",
data = "../data/chrom.data/chroms.csv")
# drop any tips from tree without data
tree <- drop.tip(phy = trees[[j]], tip = dat$species[is.na(dat$haploid)])
# drop all but focus order from tree
tree <- drop.tip(phy = tree, tip = dat$species[dat$order != orders[i]])
# scale to tree unit length
tree$edge.length <- tree$edge.length/max(branching.times(tree))
# create reduced dataset
dat.t <- dat[dat$order == orders[i],]
# track progress
print(paste("working on", orders[i]))
# make the data format for chromePlus
chrom.mat <- datatoMatrix(x = dat.t[!is.na(dat.t$haploid), c(2, 3)],
range = c(range(dat.t$haploid, na.rm = T)[1] - 2,
range(dat.t$haploid, na.rm = T)[2] + 2),
hyper = F)
# get the basic likelihood function
lik <- make.mkn(tree = tree,
states = chrom.mat,
k = ncol(chrom.mat),
strict = F,
control = list(method = "ode"))
# constrain to a biologically realistic model of chrom evolution
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain=list(drop.demi=T))
# prior with little info
priors <- make.prior.exponential(.5)
# sampled from an mcmc
results.trees[[j]] <- mcmc(con.lik, w=1, prior = priors,
x.init=runif(min=0,max=1,n=3),
nsteps=1000)
}
results.orders[[i]] <- results.trees
}
save.image("~/Desktop/all.results.RData")
plot(results.orders[[1]][[1]]$p)
plot(results.orders[[1]][[1]]$p,type="l")
plot(results.orders[[1]][[1]]$p,type="l",col=rgb(.1,.1,1,.2))
for(i in 2:100) lines(results.orders[[1]][[i]]$p,type="l",col=rgb(.1,.1,1,.2))
plot(results.orders[[1]][[1]]$p,type="l",col=rgb(.1,.1,1,.2),ylim=c(-120,-70))
for(i in 2:100) lines(results.orders[[1]][[i]]$p,type="l",col=rgb(.1,.1,1,.2))
plot(results.orders[[1]][[1]]$p,type="l",col=rgb(.1,.1,1,.2),ylim=c(-120,-70))
for(i in 2:100) lines(results.orders[[1]][[i]]$p,type="l",col=rgb((1-i/100),(i/100),1,.2))
plot(results.orders[[1]][[1]]$p,type="l",col=cols[1],ylim=c(-120,-70),lwd=.2)
cols <- rainbow(100)
plot(results.orders[[1]][[1]]$p,type="l",col=cols[1],ylim=c(-120,-70),lwd=.2)
for(i in 2:100) lines(results.orders[[1]][[i]]$p,type="l",col=cols[i],lwd=.2)
post.results <- vector(length=5)
names(post.results) <- orders
for(j in 1:5){
x <- results.orders[[j]][[1]][501:1000, ]
for(i in 2:100){
x <- rbind(x, results.orders[[j]][[i]][501:1000, ])
}
post.results[[j]] <- x
}
post.results <- vector(length=5)
names(post.results) <- orders
for(j in 1:5){
x <- results.orders[[j]][[1]][501:1000, ]
for(i in 2:100){
x <- rbind(x, results.orders[[j]][[i]][501:1000, ])
}
post.results[j] <- x
}
j <- 1
post.results <- vector("list", length=5)
names(post.results) <- orders
for(j in 1:5){
x <- results.orders[[j]][[1]][501:1000, ]
for(i in 2:100){
x <- rbind(x, results.orders[[j]][[i]][501:1000, ])
}
post.results[[j]] <- x
}
names(post.results)
hist(post.results$Isoptera$pol1)
foo <- post.results$Isoptera
View(foo)
plot(foo$asc1,type="l")
plot(foo$p,type="l")
cols <- rainbow(100)
plot(results.orders[[1]][[1]]$p,type="l",col=cols[1],ylim=c(-120,-70),lwd=.2)
for(i in 2:100) lines(results.orders[[1]][[i]]$p,type="l",col=cols[i],lwd=.2)
setwd("~/Desktop/Dropbox/projects/polyneoptera/analysis/results")
save(post.results, file="order.rates.RData")
foo <- post.results[[1]]
View(foo)
plot(foo$p)
plot(foo$p, type="l")
setwd("~/Desktop/Dropbox/projects/amphibians/rate.analyses/data")
dat <- read.csv("amphib.csv")
View(dat)
dat <- read.csv("amphib.csv")[,c(5,8)]
View(dat)
dat <- dat[complete.cases(dat),]
complete.cases(dat)
View(dat)
trees <- read.tree("pruned.trees.new")
library(ape)
trees <- read.tree("pruned.trees.new")
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/rseminar")
dat <- read.csv("amphib.csv")
# get bad tips
trees[[1]]$tip.label %in% dat$Species
# get bad tips
sum(trees[[1]]$tip.label %in% dat$Species)
trees[[1]]$tip.label
dat$Species
dat <- read.csv("amphib.csv", as.is=-T)
dat <- read.csv("amphib.csv", as.is=T)
# get bad tips
sum(trees[[1]]$tip.label %in% dat$Species)
dat <- read.csv("amphib.csv", as.is=T)
# get bad tips
sum(trees[[1]]$tip.label %in% dat$Species)
# get bad tips
trees[[1]]$tip.label[trees[[1]]$tip.label %in% dat$Species]
# get bad tips
trees[[1]]$tip.label[!trees[[1]]$tip.label %in% dat$Species]
# get bad tips
bad.tips <- trees[[1]]$tip.label[!trees[[1]]$tip.label %in% dat$Species]
new.trees <- list()
for(i in 1:100){
new.trees[[i]] <- drop.tip(trees[[i]], tip=bad.tips)
}
class(new.trees) <- "multiPhylo"
new.trees[[1]]$tip.label
write.nexus(new.trees, file="pruned.trees.nex")
dat <- dat[dat$Species %in% new.trees[[1]]$tip.label,]
length(dat$Species)
length(unique(dat$Species))
View(dat)
table(dat$Species)
dat <- dat[-c(2,45),]
length(unique(dat$Species))
length(dat$Species)
new.trees[[1]]$tip.label
length(dat$Species)
table(dat$Species)
write.csv(dat, file="amphib.csv",row.names = F)
load("/Users/hblackmon/Desktop/Dropbox/projects/amphibians/rate.analyses/results/rate.estimates.RData")
load("/Users/hblackmon/Desktop/Dropbox/projects/amphibians/rate.analyses/results/rate.estimates.RData")
rm(anura.results)
rm(caudata.results)
save.image("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/rseminar/mcmc.samples.RData")
DropBurnin <- function(mcmc, perc){
start <- nrow(mcmc) - nrow(mcmc) * perc + 1
post <- mcmc[start:nrow(mcmc), ]
}
length(gym.results)
i <- 1
DropBurnin(mcmc = gym.results[[i]],
perc = .5)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
View(x)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .1)
DropBurnin <- function(mcmc, perc){
perc <- 1-perc
start <- nrow(mcmc) - nrow(mcmc) * perc + 1
post <- mcmc[start:nrow(mcmc), ]
}
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .8)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .1)
KeepPost <- function(mcmc, perc){
start <- nrow(mcmc) * perc + 1
post <- mcmc[start:nrow(mcmc), ]
}
x <- KeepPost(mcmc = gym.results[[i]],
perc = .8)
for(i in 1:length(gym.results)){
print(i)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
}
View(x)
?rbind
posterior <- DropBurnin(mcmc = gym.results[[1]],
perc = .5)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
posterior <- rbind(posterior, x)
posterior <- DropBurnin(mcmc = gym.results[[1]],
perc = .5)
for(i in 2:length(gym.results)){
print(i)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
posterior <- rbind(posterior, x)
}
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
View(x)
ncol(x)
i <- 25
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
ncol(x)
posterior <- DropBurnin(mcmc = gym.results[[1]],
perc = .5)
for(i in 2:length(gym.results)){
print(i)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
if(ncol(x) == 5){
posterior <- rbind(posterior, x)
}else{
print(paste("SAMPLE", i, "IS BAD")
}
}
posterior <- DropBurnin(mcmc = gym.results[[1]],
perc = .5)
for(i in 2:length(gym.results)){
print(i)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
if(ncol(x) == 5){
posterior <- rbind(posterior, x)
}else{
print(paste("SAMPLE", i, "IS BAD"))
}
}
posterior <- DropBurnin(mcmc = gym.results[[1]],
perc = .5)
for(i in 2:length(gym.results)){
# print(i)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
if(ncol(x) == 5){
posterior <- rbind(posterior, x)
}else{
print(paste("SAMPLE", i, "IS BAD"))
}
}
posterior <- DropBurnin(mcmc = gym.results[[1]],
perc = .5)
for(i in 2:length(gym.results)){
# print(i)
x <- DropBurnin(mcmc = gym.results[[i]],
perc = .5)
if(nrow(x) == 500){
posterior <- rbind(posterior, x)
}else{
print(paste("SAMPLE", i, "IS BAD"))
}
}
View(posterior)
View(posterior)
range(posterior$pol1)
hist(posterior$pol1)
plot(posterior$pol1, type="l")
hist(log(posterior$pol1))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
col=rgb(80,0,0))
80/255
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
col=rgb(.313,0,0))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
col=rgb(.313,0,0))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
col=rgb(.313,0,0,.5))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
col=rgb(.313,0,0,.15))
min(posterior$pol1)
pol.ind <- round(posterior$pol1*1000)
pol.ind
max(post.ind)
max(pol.ind)
plot(x=posterior$desc1,
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
col=rainbow(359881)[pol.ind])
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
col=rainbow(359881)[pol.ind])
range(log(posterior$pol1))
range(log(posterior$pol1) + 7.4)
pol.ind <- round(log(posterior$pol1) + 7.4)
range(pol.ind)
pol.ind <- round(log(posterior$pol1) + 7.4)
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
col=rainbow(13)[pol.ind])
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
xlab="Chromosome Fusion \nRate (per my)"
col=rainbow(13)[pol.ind])
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
xlab="Chromosome Fusion \nRate (per my)"),
col=rainbow(13)[pol.ind])
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
par(mar=c(2,2,2,2))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
par(mar=c(4,4,4,4))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
par(mar=c(4,5,4,4))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
par(mar=c(4,6,4,4))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
par(mar=c(4.4,6,2,2))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
text(x=0,y=14.7, "Gymnophiona",pos=1)
text(x=0,y=14.7, "Gymnophiona",pos=2)
text(x=0,y=14.7, "Gymnophiona",pos=3)
text(x=0,y=14.7, "Gymnophiona",pos=4)
par(mar=c(4.4,6,2,2))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
text(x=0,y=14.7, "Gymnophiona",pos=4)
par(mar=c(4.4,6,2,2))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
main="rates of chromosome evolution"
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
text(x=0,y=14.7, "Gymnophiona",pos=4)
par(mar=c(4.4,6,4,2))
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
main="rates of chromosome evolution"
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
text(x=0,y=14.7, "Gymnophiona",pos=4)
plot(x=posterior$desc1,
y=posterior$asc1,
pch=16,
cex=.2,
main="rates of chromosome evolution",
ylab="Chromosome Fission \n Rate (per my)",
xlab="Chromosome Fusion \nRate (per my)",
col=rainbow(13)[pol.ind])
text(x=0,y=14.7, "Gymnophiona",pos=4)
