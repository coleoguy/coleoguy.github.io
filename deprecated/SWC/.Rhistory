set.seed(2)
tree <- trees(pars = c(.5, .1),
type = "bd", n = 1,
max.taxa = 100,
include.extinct = FALSE)[[1]]
# Simplify tree & rescale this tree to unit length
tree <- tree[c(1, 3, 5, 2)]
class(tree) <- "phylo"
tree <- geiger::rescale(tree, "depth", 1)
plot(tree)
# Evolve chromosome dataset using
# old chromevol model 2010
set.seed(2)
data <- simChrom(tree, pars=c(2, 1, 0.1, 0.1, 50), limits=c(2,100), model="2010")
hist(data, breaks=range(data)[2]-range(data)[1])
data("tree")
data("chrom")
plot(tree)
hist(data, breaks=range(data)[2]-range(data)[1])
data("tree")
data("chrom")
range <- c(min(chrom)-2,max(chrom)+2)
# convert chromosome number to format for diversitree
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=range, hyper=F)
source('~/Desktop/Dropbox/gitrepos/r-packages/chromevolR/R/datatoMatrix.R')
range <- c(min(chrom)-2,max(chrom)+2)
# convert chromosome number to format for diversitree
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=range, hyper=F)
View(d.data)
source('~/Desktop/Dropbox/gitrepos/r-packages/chromevolR/R/datatoMatrix.R')
d.data <- cbind(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=range, hyper=F)
is.matrix(d.data)
as.data.frame(d.data)
foo <- as.data.frame(d.data)
foo[,2]
View(foo)
View(d.data)
d.data[,2]
as.numeric(d.data[,2])
chrom
d.data <- data.frame(names(chrom), chrom)
View(d.data)
d.data <- data.frame(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=range, hyper=F)
source('~/Desktop/Dropbox/gitrepos/r-packages/chromevolR/R/datatoMatrix.R')
d.data <- data.frame(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=range, hyper=F)
d.data <- cbind(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=range, hyper=T)
d.data <- data.frame(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=range, hyper=T)
source('~/Desktop/Dropbox/gitrepos/r-packages/chromevolR/R/datatoMatrix.R')
d.data <- data.frame(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=range, hyper=T)
source('~/Desktop/Dropbox/gitrepos/r-packages/chromevolR/R/datatoMatrix.R')
d.data <- data.frame(names(chrom), chrom)
p.mat <- datatoMatrix(x=d.data, range=range, hyper=F)
View(p.mat)
d.data <- data.frame(names(chrom), chrom)
hp.mat <- datatoMatrix(x=d.data, range=range, hyper=T)
d.data <- data.frame(names(chrom), chrom, runif(100, min=0, max=1))
d.data <- data.frame(names(chrom), chrom, runif(100, min=0, max=1))
hp.mat <- datatoMatrix(x=d.data, range=range, hyper=T)
View(hp.mat)
lik <- make.mkn(tree, states=p.mat, k=ncol(p.mat), strict=F)
# Constrain to chromevol (w/o hyperstate)
lik.con <- constrainMkn(p.mat, lik, model="single")
lik.con <- constrainMkn(p.mat, lik)
foo <- find.mle(lik.con, x.init = startVals(length(argnames(lik.con)), 0, 1))
lik.con(.1)
lik.con(rep(.1, 7))
h.lik <- make.mkn(tree, states=hp.mat, k=ncol(hp.mat), strict=F)
hp.mat[1, 6] <- 0
# this will allow us to run make.mkn without error
h.lik <- make.mkn(tree, states=hp.mat, k=ncol(hp.mat), strict=F)
# but we can't get a likelihood
h.lik(startVals(380,0,1))
# we could check that nothing odd is going on by getting rid of all uncertainty
hp.mat[,] <- 0
for(i in 1:nrow(hp.mat)){
hp.mat[i, sample(1:20, 1)] <- 1
}
# now it works
h.lik <- make.mkn(tree, states=hp.mat, k=ncol(hp.mat), strict=F)
h.lik(startVals(380,0,1))
# add one taxa uncertain
hp.mat[1,] <- 0
hp.mat[1, c(1,11)]<-.5
# mkn now fails
h.lik <- make.mkn(tree, states=hp.mat, k=ncol(hp.mat), strict=F)
h.lik(startVals(380,0,1))
lik <- make.mkn(tree, states=p.mat, k=ncol(p.mat), strict=F, control=list(method="ode"))
# Constrain to chromevol (w/o hyperstate)
lik.con <- constrainMkn(p.mat, lik)
# check to make sure function is valid
lik.con(rep(.1, 7))
# find MLE
foo <- find.mle(lik.con, x.init = startVals(length(argnames(lik.con)), 0, 1))
a <- c(1,2,3)
b<- a
a*a
h <- 1
ua <- 0
s <- .1
ua <- .01
W <- c(1, 1-h*s, 1-s, 1, 1+h*s, 1+s, 1-ua, 1+h*s-ua, 1+s-ua) /
max(1, 1-h*s, 1-s, 1, 1+h*s, 1+s, 1-ua, 1+h*s-ua, 1+s-ua)
W
chroms <- vector(mode="numeric", length=12)
names(chroms) <- c("XfA", "Xfa", "XfAi", "Xfai",
"XmA", "Xma", "XmAi", "Xmai", "YmA", "Yma", "YmAi", "Ymai")
chroms[1:12] <- 0
chroms[c(1,2,5,6,9,10)] <- c(.5, .5, .25, .25, .25, .25)
Wbar <- sum(chroms * W)
library(evobiR)
help("ShowTree")
help("SuperMatrix")
install.packages("viridis", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("~/Desktop/stochmapping")
library(geiger)
library(phytools)
library(viridis)
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100, seed=1)
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
set.seed(33)
data1 <- sim.char(tree, par, model = "discrete")
data2 <- sim.char(tree, par2, model = "discrete")
map1 <- make.simmap(tree, x=data1[,,1],nsims=1, model="ARD")
map2 <- make.simmap(tree, x=data2[,,1],nsims=1, model="ARD")
cols<-setNames(viridis(2),1:2)
par(mfcol=c(1,2))
plotSimmap(map1, colors=cols, lwd=3)
plotSimmap(map2, colors=cols, lwd=3)
nocor.samerate <- testDistances(tree,
trait1=data1[,,1],
trait2=data2[,,1],
n=100, model="ARD")
source("stochDistancesR")
source("stochDistances.R")
nocor.samerate <- testDistances(tree,
trait1=data1[,,1],
trait2=data2[,,1],
n=100, model="ARD")
source("stochDistances.R")
## First we simulate some data
library(geiger)
library(phytools)
library(viridis)
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100, seed=1)
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
set.seed(33)
data1 <- sim.char(tree, par, model = "discrete")
data2 <- sim.char(tree, par2, model = "discrete")
map1 <- make.simmap(tree, x=data1[,,1],nsims=1, model="ARD")
map2 <- make.simmap(tree, x=data2[,,1],nsims=1, model="ARD")
cols<-setNames(viridis(2),1:2)
par(mfcol=c(1,2))
plotSimmap(map1, colors=cols, lwd=3)
plotSimmap(map2, colors=cols, lwd=3)
nocor.samerate <- testDistances(tree,
trait1=data1[,,1],
trait2=data2[,,1],
n=100, model="ARD")
par(mfcol=c(2,4))
foo <- nocor.diffrate
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100, seed=1)
data1 <- sim.char(tree, par, model = "discrete")
data2 <- sim.char(tree, par2, model = "discrete")
map1 <- make.simmap(tree, x=data1[,,1],nsims=1, model="ARD")
map2 <- make.simmap(tree, x=data2[,,1],nsims=1, model="ARD")
cols<-setNames(viridis(2),1:2)
par(mfcol=c(1,2))
plotSimmap(map1, colors=cols, lwd=3)
plotSimmap(map2, colors=cols, lwd=3)
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100, seed=1)
data1 <- sim.char(tree, par, model = "discrete")
data2 <- sim.char(tree, par2, model = "discrete")
map1 <- make.simmap(tree, x=data1[,,1],nsims=1, model="ARD")
map2 <- make.simmap(tree, x=data2[,,1],nsims=1, model="ARD")
cols<-setNames(viridis(2),1:2)
par(mfcol=c(1,2))
plotSimmap(map1, colors=cols, lwd=3)
plotSimmap(map2, colors=cols, lwd=3)
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100, seed=1)
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100)
data1 <- sim.char(tree, par, model = "discrete")
data2 <- sim.char(tree, par2, model = "discrete")
map1 <- make.simmap(tree, x=data1[,,1],nsims=1, model="ARD")
map2 <- make.simmap(tree, x=data2[,,1],nsims=1, model="ARD")
cols<-setNames(viridis(2),1:2)
par(mfcol=c(1,2))
plotSimmap(map1, colors=cols, lwd=3)
plotSimmap(map2, colors=cols, lwd=3)
data1[,,1]
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
data1 <- data2 <- list()
for(i in 1:100){
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100)
data1[[i]] <- sim.char(tree, par, model = "discrete")[,,1]
data2[[i]] <- sim.char(tree, par2, model = "discrete")[,,1]
}
par
par <- rbind(c(0, -.025, .025, 0),
c(.025, 0, 0, -.025),
c(.025, 0, 0, -.05),
c(0, .025, -.025, 0))
par
par <- rbind(c(-.5, .025, .025, 0),
c(.025, -.5, 0, .025),
c(.025, 0, -.075, .05),
c(0, .025, .025, -.5))
par
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100)
par <- rbind(c(-.5, .025, .025, 0),
c(.025, -.5, 0, .025),
c(.025, 0, -.075, .05),
c(0, .025, .025, -.5))
sim.char(tree, par, model = "discrete")[,,1]
par <- rbind(c(-.5, .025, .025, 0),
c(.025, -.05, 0, .025),
c(.025, 0, -.075, .05),
c(0, .025, .025, -.05))
sim.char(tree, par, model = "discrete")[,,1]
par <- rbind(c(-.5, .025, .025, 0),
c(.025, -.05, 0, .025),
c(.025, 0, -.075, .05),
c(0, .025, .025, -.05))
par <- rbind(c(-.5, .025, .025, 0),
c(.025, -.05, 0, .025),
c(.025, 0, -.075, .05),
c(0, .025, .025, -.05))
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100)
sim.char(tree, par, model = "discrete")[,,1]
par
rowSums(par)
c(-.5, .025, .025, 0)
par <- rbind(c(-.05, .025, .025, 0),
c(.025, -.05, 0, .025),
c(.025, 0, -.075, .05),
c(0, .025, .025, -.05))
rowSums(par)
sim.char(tree, par, model = "discrete")[,,1]
a<-.025
b<-.05
par <- rbind(c(-2*a, a, a, 0),
c(a, -2*a, 0, a),
c(a, 0, -(a+b), b),
c(0, a, a, -2*a))
par
rowSums(par)
a<-.025
b<-.050
par <- rbind(c(-2*a, a, a, 0),
c(a, -2*a, 0, a),
c(a, 0, -(a+b), b),
c(0, a, a, -2*a))
rowSums(par)
x <- sim.char(tree, par, model = "discrete")[,,1]
x
y<-z<-x
y == 1 | y == 2
y[y<=2]
y<-z<-x
y[y<=2] <- 1
y[y>2] <- 2
y
y <- z <- x
y[y <= 2] <- 1
y[y > 2] <- 2
z[z == 1 | z == 3] <- 1
z[z == 2 | z == 4] <- 2
y
x
z
a<-.05
b<-.025
par <- rbind(c(-2*a, a, a, 0), c(a, -2*a, 0, a),
c(a, 0, -(a+b), b), c(0, a, a, -2*a))
data1 <- data2 <- list()
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100)
x <- sim.char(tree, par, model = "discrete")[,,1]
y <- z <- x
y[y <= 2] <- 1
y[y > 2] <- 2
z[z == 1 | z == 3] <- 1
z[z == 2 | z == 4] <- 2
isupper <- function(x) grepl("^[[:upper:]]+$", x)
islower <- function(x) grepl("^[[:lower:]]+$", x)
isupper("Heath")
isupper("HEATH")
isupper(c("H","G","g")
)
isupper("Heath")
islower("Heath")
x <- c("A","a","Leslie", "ABBI")
isupper(x)
x <- c("A","a","Leslie", "ABBI", "beetle")
islower(x)
library(devtools)
install_github('coleoguy/evobir', build_vignettes = T)
library(evobiR)
library(devtools)
install_github('coleoguy/evobir', build_vignettes = T)
library(evobiR)
library(devtools)
install_github('coleoguy/evobir', build_vignettes = T)
library(evobiR)
library(geiger)
library(phytools)
library(viridis)
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100, seed=1)
par <- rbind(c(-.025, .025), c(.075, -.075))
par2 <- rbind(c(-.025, .025), c(.075, -.075))
data1 <- sim.char(tree, par, model = "discrete")
data2 <- sim.char(tree, par2, model = "discrete")
map1 <- make.simmap(tree, x=data1[,,1],nsims=1, model="ARD")
map2 <- make.simmap(tree, x=data2[,,1],nsims=1, model="ARD")
cols<-setNames(viridis(2),1:2)
par(mfcol=c(1,2))
plotSimmap(map1, colors=cols, lwd=3)
plotSimmap(map2, colors=cols, lwd=3)
nocor.samerate <- testDistances(tree,
trait1=data1[,,1],
trait2=data2[,,1],
n=100, model="ARD")
db <- c('Tribolium_castaneum','Tribolium_freemani','Gnatocerus_cornutus')
setwd("~/Desktop/distances")
1:length(db)
targets <- read.dna("300+bpExons.fa", format = "fasta",
as.character = T, as.matrix = F)
targets[[1]]
targets[1]
x=targets[1]
write.dna(x=targets[1], file="target.fasta", format = "fasta")
system(command = paste("./makeblastdb -in Tribolium_freemani.fa -title tfreemani -dbtype nucl", sep = ""), intern = T, wait = T)
system(command = paste("./makeblastdb -in Tfreemani.fa -title tfreemani -dbtype nucl", sep = ""), intern = T, wait = T)
system(command = paste("./makeblastdb -in Gcornutus.fa -title gcornutus -dbtype nucl", sep = ""), intern = T, wait = T)
paste("./blastn -query  target.fasta -db blastdbs/", db[i], ".fa -out ", db[i],".txt -outfmt '6 qseqid qstart qend sseqid sstart ssend sframe pident length gaps evalue bitscore sseq' -max_target_seqs=1", sep = "")
i<-1
paste("./blastn -query  target.fasta -db blastdbs/", db[i], ".fa -out ", db[i],".txt -outfmt '6 qseqid qstart qend sseqid sstart ssend sframe pident length gaps evalue bitscore sseq' -max_target_seqs=1", sep = "")
db <- c('Tfreemani','Gcornutus')
paste("./blastn -query  target.fasta -db blastdbs/", db[i], ".fa -out ", db[i],".txt -outfmt '6 qseqid qstart qend sseqid sstart ssend sframe pident length gaps evalue bitscore sseq' -max_target_seqs=1", sep = "")
system(command = paste("./blastn -query  target.fasta -db blastdbs/Tfreemani.fa -out Tfreemani.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
x <- read.table("Tfreemani.txt")
x[2]
x[1,2]
results <- as.data.frame(matrix(,1,2))
#table for results
results <- as.data.frame(matrix(,1,2))
colnames(results)<- c("freemani", "cornutus")
# here we will loop through and look at
# every large exon
for(i in 1:length(targets)){
print(i)
# write our current exon
write.dna(x=targets[i], file="target.fasta", format = "fasta")
# now we look at each species recording percent identity as our distance measure
# and the length of the match
system(command = paste("./blastn -query  target.fasta -db blastdbs/Tfreemani.fa -out Tfreemani.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
system(command = paste("./blastn -query  target.fasta -db blastdbs/Gcornutus.fa -out Gcornutus.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
# compare the hits conditioning on
# 1) equal length
# 2) length > 250
# this biases us towards a closer measure since we
# are throwing out stuff with a insertion in either
# species
x <- read.table("Tfreemani.txt")
y <- read.table("Gcornutus.txt")
if(x[1,2] == y[1,2] & x[1,2]>250) results[i,1:2] <- c(x[1,1], y[1,1])
}
y <- read.table("Gcornutus.txt")
file.info("Gcornutus.txt")
file.info("Gcornutus.txt")$size
file.info("Tfreemani.txt")$size
library(ape)
# we will use this file which is just a collection of
# of all of the exons in castaneum that are at least
# 300 nucleotides long
targets <- read.dna("300+bpExons.fa", format = "fasta",
as.character = T, as.matrix = F)
#table for results
results <- as.data.frame(matrix(,1,2))
colnames(results)<- c("freemani", "cornutus")
# here we will loop through and look at
# every large exon
for(i in 1:length(targets)){
print(i)
# write our current exon
write.dna(x=targets[i], file="target.fasta", format = "fasta")
# now we look at each species recording percent identity as our distance measure
# and the length of the match
system(command = paste("./blastn -query  target.fasta -db blastdbs/Tfreemani.fa -out Tfreemani.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
system(command = paste("./blastn -query  target.fasta -db blastdbs/Gcornutus.fa -out Gcornutus.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
# compare the hits conditioning on
# 1) equal length
# 2) length > 250
# this biases us towards a closer measure since we
# are throwing out stuff with a insertion in either
# species
if(file.info("Tfreemani.txt")$size != 0 &
file.info("Gcornutus.txt")$size != 0){
x <- read.table("Tfreemani.txt")
y <- read.table("Gcornutus.txt")
if(x[1,2] == y[1,2] & x[1,2]>250){
results[i,1:2] <- c(x[1,1], y[1,1])
}
}
}
View(results)
is.na(results[,1])
results[is.na(results[,1]),]
results[!is.na(results[,1]),]
results <- results[!is.na(results[,1]),]
hist(results[,1])
hist(results[,2])
colMeans(results)
hist(x$cornutus)
hist(results$cornutus)
results$cornutus
results$freemani
colMeans(results)
summary(results[,1])
summary(results[,2])
results[,1]==100
sum(results[,1]==100)
sum(results[,2]==100)
foo <- results[results[,2]!=100,]
sum(foo[,1]==100)
summary(foo[,1])
summary(foo[,2])
system(command = paste("./makeblastdb -in GcornutusM.fa -title gcornutusM -dbtype nucl", sep = ""), intern = T, wait = T)
write.csv(results, file="initial.csv")
for(i in 1:length(targets)){
print(i)
write.dna(x=targets[i], file="target.fasta", format = "fasta")
system(command = paste("./blastn -query  target.fasta -db blastdbs/Tfreemani.fa -out Tfreemani.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
system(command = paste("./blastn -query  target.fasta -db blastdbs/GcornutusM.fa -out Gcornutus.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
if(file.info("Tfreemani.txt")$size != 0 &
file.info("Gcornutus.txt")$size != 0){
x <- read.table("Tfreemani.txt")
y <- read.table("Gcornutus.txt")
if(x[1,2] == y[1,2] & x[1,2]>250){
results[i,1:2] <- c(x[1,1], y[1,1])
}
}
}
targets <- read.dna("300+bpExons.fa", format = "fasta",
as.character = T, as.matrix = F)
results <- as.data.frame(matrix(,1,2))
colnames(results)<- c("freemani", "cornutus.male")
for(i in 1:length(targets)){
print(i)
write.dna(x=targets[i], file="target.fasta", format = "fasta")
system(command = paste("./blastn -query  target.fasta -db blastdbs/Tfreemani.fa -out Tfreemani.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
system(command = paste("./blastn -query  target.fasta -db blastdbs/GcornutusM.fa -out Gcornutus.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
if(file.info("Tfreemani.txt")$size != 0 &
file.info("Gcornutus.txt")$size != 0){
x <- read.table("Tfreemani.txt")
y <- read.table("Gcornutus.txt")
if(x[1,2] == y[1,2] & x[1,2]>250){
results[i,1:2] <- c(x[1,1], y[1,1])
}
}
}
results <- results[!is.na(results[,1]),]
hist(results[,1])
hist(results[,2])
summary(results[,1])
summary(results[,2])
targets <- read.dna("300+bpExons.fa", format = "fasta",
as.character = T, as.matrix = F)
results <- as.data.frame(matrix(,1,2))
colnames(results)<- c("freemani", "cornutus.male")
for(i in 1:length(targets)){
print(i)
write.dna(x=targets[i], file="target.fasta", format = "fasta")
system(command = paste("./blastn -query  target.fasta -db blastdbs/Tfreemani.fa -out Tfreemani.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
system(command = paste("./blastn -query  target.fasta -db blastdbs/GcornutusM.fa -out Gcornutus.txt -outfmt '6 pident length' -max_target_seqs=1", sep = ""), intern = T, wait = T)
if(file.info("Tfreemani.txt")$size != 0 &
file.info("Gcornutus.txt")$size != 0){
x <- read.table("Tfreemani.txt")
y <- read.table("Gcornutus.txt")
if(x[1,2] == y[1,2] & x[1,2]>250){
results[i,1:2] <- c(x[1,1], y[1,1])
}
}
}
results <- results[!is.na(results[,1]),]
hist(results[,1])
hist(results[,2])
summary(results[,1])
summary(results[,2])
write.csv(results, file="try2.csv")
ls
ls()
list.files()
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/SWC")
list.files()
