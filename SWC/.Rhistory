ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# load data from Yellowstone
data("faithful")
# check out the data
head(faithful)
# here we extract the waiting times between eruptions
waiting <- faithful[ ,2]
# get the mode
mode(waiting)
# that didnt work
help(mode)
# lets try our new function
Mode(waiting)
# lets visualize it too
hist(waiting)
help(mode)
Mode(waiting)
hist(faithful$waiting, breaks=30)
hist(faithful$waiting, breaks=50)
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/SWC")
data <- read.csv("scores.csv")
data <- read.csv("scores.csv")
head(data)
plot(data$score)
hist(data4score)
hist(data$score)
hist(data$score, breaks=12)
head(data)
help(t.test)
males <- data$score[data$sex=='male']
females <- data$score[data$sex=='female']
t.test(x=male, y=females)
t.test(x=males, y=females)
comp <- data$score[data$method=='comp.']
paper <- data$score[data$method!='comp.']
t.test(x=comp, y=paper)
boxplot(comp, paper)
boxplot(comp, paper)
boxplot(comp, paper)
boxplot(comp, paper, main="Paper vs Comp.")
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score")
help("boxplot")
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", names=c("comp.", "paper"))
comp
points(x=rep(1, 30), y=comp)
jitter(1)
jitter(1)
jitter(1)
jitter(1)
jitter(1)
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", names=c("comp.", "paper"))
points(x=rep(jitter(1), 30), y=comp)
bump <- rep(jitter(1), 30)
bump
bump <- jitter(rep(1, 30))
bump
bump <- jitter(rep(1, 30)) - 1
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", names=c("comp.", "paper"))
points(x=1+bump, y=comp)
bump <- jitter(rep(1, 30), factor=5) - 1
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", names=c("comp.", "paper"))
points(x=1+bump, y=comp)
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="plum")
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="plum")
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=comp, pch=20, col="violet")
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=comp, pch=20, col="violet")
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
stats <- t.test(x=comp, y=paper)
names(stats)
text(x=.5,y=.9, paste("T-stat=", stats[1], " P-val=", stats[2]))
text(x=.5,y=.9, paste("T-stat=", stats[1], " P-val=", stats[2]))
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
text(x=.5,y=.9, paste("T-stat=", round(stats[1],3),
" P-val=", round(stats[3], 3))
)
text(x=.5,y=.9, paste("T-stat=", round(stats[1],3),
" P-val=", round(stats[3], 3)))
names(stats)
stats[1]
round(stats$statistic,3)
round(stats[3], 3)
stats[3]
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
text(x=.5,y=.9, paste("T-stat=", round(stats[[1]],3),
" P-val=", round(stats[[3]], 3)))
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
text(x=.65,y=.9, paste("T-stat=", round(stats[[1]],3),
" P-val=", round(stats[[3]], 3)))
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
text(x=.85,y=.9, paste("T-stat=", round(stats[[1]],3),
" P-val=", round(stats[[3]], 3)))
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
text(x=.85,y=.9, paste("T-stat=", round(stats[[1]],3),
" P-val=", round(stats[[3]], 3)), sep="")
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
text(x=.85,y=.9, paste("T-stat=", round(stats[[1]],3),
" P-val=", round(stats[[3]], 3), sep=""))
boxplot(comp, paper, main="Paper vs Comp.",
ylab="Test score", outline=F,
names=c("comp.", "paper"))
points(x=1+bump, y=comp, pch=20, col="orchid")
points(x=2+bump, y=paper, pch=20, col="maroon")
text(x=.85,y=.9, paste("T-stat=", round(stats[[1]],3),
" P-val= <.01", sep=""))
data(iris)
head(iris)
head(iris)
unique(iris$Species)
iris[iris$Species == versicolor, ]
iris[iris$Species == "versicolor", ]
data$score >=.7
data$method == "comp."
results[1,1] <- sum(data$score >=.7 & data$method == "comp.")
results[1,2] <- sum(data$score <.7 & data$method == "comp.")
results[2,1] <- sum(data$score >=.7 & data$method == "paper")
results[2,2] <- sum(data$score <.7 & data$method == "paper")
mosaicplot(results,las=1, col=c("blue", "red"), main="Effect of note taking methods")
results <- matrix(,2,2)
colnames(results) <- c("passing", "failing")
rownames(results) <- c("computer", "paper")
results[1,1] <- sum(data$score >=.7 & data$method == "comp.")
results[1,2] <- sum(data$score <.7 & data$method == "comp.")
results[2,1] <- sum(data$score >=.7 & data$method == "paper")
results[2,2] <- sum(data$score <.7 & data$method == "paper")
mosaicplot(results,las=1, col=c("blue", "red"), main="Effect of note taking methods")
results <- matrix(,2,2)
colnames(results) <- c("passing", "failing")
rownames(results) <- c("computer", "paper")
results[1,1] <- sum(data$score >=.7 & data$method == "comp.")
results[1,2] <- sum(data$score <.7 & data$method == "comp.")
results[2,1] <- sum(data$score >=.7 & data$method == "paper")
results[2,2] <- sum(data$score <.7 & data$method == "paper")
mosaicplot(results,las=1, col=c("blue", "red"), main="Effect of note taking methods")
install.packages("auteur", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
F_AB_AB = 1
F_AB_Ab = 1
F_AB_aB = 1
F_AB_ab = 1
F_Ab_AB = 1
F_Ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_Ab_aB = 1
F_Ab_ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_aB_AB = 1
F_aB_Ab = 1
F_aB_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_aB_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_AB = 1
F_ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_ab_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_ab = 1
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab = 1 - AB - Ab - aB
AB <- .25
Ab <- .25
aB <- .25
ab = 1 - AB - Ab - aB
AB*AB*F_AB_AB + AB*Ab*F_AB_Ab + AB*aB*F_AB_aB + AB*ab*F_AB_ab
+ Ab*AB*F_Ab_AB + Ab*Ab*F_Ab_Ab + Ab*aB*F_Ab_aB + Ab*ab*F_Ab_ab
+ aB*AB*F_aB_AB + aB*Ab*F_aB_Ab + aB*aB*F_aB_aB + aB*ab*F_aB_ab
+ ab*AB*F_ab_AB + ab*Ab*F_ab_Ab + ab*aB*F_ab_aB + ab*ab*F_ab_ab
F_AB_AB = 1
F_AB_Ab = 1
F_AB_aB = 1
F_AB_ab = 1
F_Ab_AB = 1
F_Ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_Ab_aB = 1
F_Ab_ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_aB_AB = 1
F_aB_Ab = 1
F_aB_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_aB_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_AB = 1
F_ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_ab_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_ab = 1
F_AB_AB = 1
F_AB_Ab = 1
F_AB_aB = 1
F_AB_ab = 1
F_Ab_AB = 1
F_Ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_Ab_aB = 1
F_Ab_ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_aB_AB = 1
F_aB_Ab = 1
F_aB_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_aB_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_AB = 1
F_ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_ab_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
AB*AB*F_AB_AB + AB*Ab*F_AB_Ab + AB*aB*F_AB_aB + AB*ab*F_AB_ab
+ Ab*AB*F_Ab_AB + Ab*Ab*F_Ab_Ab + Ab*aB*F_Ab_aB + Ab*ab*F_Ab_ab
+ aB*AB*F_aB_AB + aB*Ab*F_aB_Ab + aB*aB*F_aB_aB + aB*ab*F_aB_ab
+ ab*AB*F_ab_AB + ab*Ab*F_ab_Ab + ab*aB*F_ab_aB + ab*ab*F_ab_ab
ab*AB
ab*AB +
ab*Ab +
ab*aB +
ab*ab
ab*AB +
ab*Ab +
ab*AB +
ab*Ab
ab*AB
ab*Ab
ab*AB +
ab*Ab
ab*AB + ab*Ab
ab*AB + ab*Ab + ab*aB + ab*ab
AB*AB + AB*Ab + AB*aB + AB*ab
Ab*AB + Ab*Ab + Ab*aB + Ab*ab
aB*AB + aB*Ab + aB*aB + aB*ab
ab*AB + ab*Ab + ab*aB + ab*ab
W = AB*AB*F_AB_AB + AB*Ab*F_AB_Ab + AB*aB*F_AB_aB + AB*ab*F_AB_ab
+ Ab*AB*F_Ab_AB + Ab*Ab*F_Ab_Ab + Ab*aB*F_Ab_aB + Ab*ab*F_Ab_ab
+ aB*AB*F_aB_AB + aB*Ab*F_aB_Ab + aB*aB*F_aB_aB + aB*ab*F_aB_ab
+ ab*AB*F_ab_AB + ab*Ab*F_ab_Ab + ab*aB*F_ab_aB + ab*ab*F_ab_ab
W = AB*AB*F_AB_AB + AB*Ab*F_AB_Ab + AB*aB*F_AB_aB + AB*ab*F_AB_ab
+ Ab*AB*F_Ab_AB + Ab*Ab*F_Ab_Ab + Ab*aB*F_Ab_aB + Ab*ab*F_Ab_ab
+ aB*AB*F_aB_AB + aB*Ab*F_aB_Ab + aB*aB*F_aB_aB + aB*ab*F_aB_ab
+ ab*AB*F_ab_AB + ab*Ab*F_ab_Ab + ab*aB*F_ab_aB + ab*ab*F_ab_ab
W  <-  AB*AB*F_AB_AB + AB*Ab*F_AB_Ab + AB*aB*F_AB_aB + AB*ab*F_AB_ab +
Ab*AB*F_Ab_AB + Ab*Ab*F_Ab_Ab + Ab*aB*F_Ab_aB + Ab*ab*F_Ab_ab +
aB*AB*F_aB_AB + aB*Ab*F_aB_Ab + aB*aB*F_aB_aB + aB*ab*F_aB_ab +
ab*AB*F_ab_AB + ab*Ab*F_ab_Ab + ab*aB*F_ab_aB + ab*ab*F_ab_ab
W  <-  sum(AB*AB*F_AB_AB, AB*Ab*F_AB_Ab, AB*aB*F_AB_aB, AB*ab*F_AB_ab,
Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab,
aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab,
ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
AB*AB*F_AB_AB
AB*Ab*F_AB_Ab
AB*aB*F_AB_aB
AB*ab*F_AB_ab
Ab*AB*F_Ab_AB
Ab*Ab*F_Ab_Ab
Ab*aB*F_Ab_aB
Ab*ab*F_Ab_ab
aB*ab*F_aB_ab
aB*aB*F_aB_aB
aB*Ab*F_aB_Ab
aB*AB*F_aB_AB
ab*AB*F_ab_AB
ab*Ab*F_ab_Ab
ab*aB*F_ab_aB
ab*ab*F_ab_ab
sum(AB*AB*F_AB_AB, AB*Ab*F_AB_Ab, AB*aB*F_AB_aB, AB*ab*F_AB_ab,
Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab,
aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab,
ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
W  <-  sum(AB*AB*F_AB_AB, AB*Ab*F_AB_Ab, AB*aB*F_AB_aB, AB*ab*F_AB_ab,
Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab,
aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab,
ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
W <- sum(AB*AB*F_AB_AB, AB*Ab*F_AB_Ab, AB*aB*F_AB_aB, AB*ab*F_AB_ab,
Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab,
aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab,
ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
W <- sum(AB*AB*F_AB_AB, AB*Ab*F_AB_Ab, AB*aB*F_AB_aB, AB*ab*F_AB_ab, Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab, aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab, ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
W <- sum(AB*AB*F_AB_AB, AB*Ab*F_AB_Ab, AB*aB*F_AB_aB, AB*ab*F_AB_ab,
Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab, aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab, ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
W <- sum(AB*AB*F_AB_AB, AB*Ab*F_AB_Ab, AB*aB*F_AB_aB, AB*ab*F_AB_ab,
Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab, aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab, ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
W <- sum(AB * AB * F_AB_AB, AB * Ab * F_AB_Ab, AB * aB * F_AB_aB, AB * ab * F_AB_ab,
Ab*AB*F_Ab_AB, Ab*Ab*F_Ab_Ab, Ab*aB*F_Ab_aB, Ab*ab*F_Ab_ab, aB*AB*F_aB_AB, aB*Ab*F_aB_Ab, aB*aB*F_aB_aB, aB*ab*F_aB_ab, ab*AB*F_ab_AB, ab*Ab*F_ab_Ab, ab*aB*F_ab_aB, ab*ab*F_ab_ab)
W <- sum(AB * AB * F_AB_AB, AB * Ab * F_AB_Ab,
AB * aB * F_AB_aB, AB * ab * F_AB_ab,
Ab * AB * F_Ab_AB, Ab * Ab * F_Ab_Ab,
Ab * aB * F_Ab_aB, Ab * ab * F_Ab_ab,
aB * AB * F_aB_AB, aB * Ab * F_aB_Ab,
aB * aB * F_aB_aB, aB * ab * F_aB_ab,
ab * AB * F_ab_AB, ab * Ab * F_ab_Ab,
ab * aB * F_ab_aB, ab * ab * F_ab_ab)
sum(4,5,6,7,8)
sum(4,5,
6,7,8)
sum(4*3,5,
6,7,8)
bar<-foo<-3
sum(4*3,5*bar,7,8)
sum(4*3,5*bar,
7,8)
W <- sum(AB * AB * F_AB_AB, AB * Ab * F_AB_Ab,
AB * aB * F_AB_aB, AB * ab * F_AB_ab,
Ab * AB * F_Ab_AB, Ab * Ab * F_Ab_Ab,
Ab * aB * F_Ab_aB, Ab * ab * F_Ab_ab,
aB * AB * F_aB_AB, aB * Ab * F_aB_Ab,
aB * aB * F_aB_aB, aB * ab * F_aB_ab,
ab * AB * F_ab_AB, ab * Ab * F_ab_Ab,
ab * aB * F_ab_aB, ab * ab * F_ab_ab)
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab <- 1 - AB - Ab - aB
F_AB_AB <- F_AB_Ab <- F_AB_aB <- F_AB_ab <- F_Ab_AB <- F_Ab_Ab <- F_Ab_aB <- F_Ab_ab <- F_aB_AB <- F_aB_Ab <- F_aB_aB <- F_aB_ab <- F_ab_AB <- F_ab_Ab <- F_ab_aB <- F_ab_ab <- 1
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab <- 1 - AB - Ab - aB
F_AB_AB <- F_AB_Ab <- F_AB_aB <- F_AB_ab <- F_Ab_AB <- F_Ab_Ab <- F_Ab_aB <- F_Ab_ab <- F_aB_AB <- F_aB_Ab <- F_aB_aB <- F_aB_ab <- F_ab_AB <- F_ab_Ab <- F_ab_aB <- F_ab_ab <- 1
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab <- 1 - AB - Ab - aB
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab <- 1 - AB - Ab - aB
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab <- 1 - AB - Ab - aB
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab <- 1 - AB - Ab - aB
r <- .5
AB <- .25
Ab <- .25
aB <- .25
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab <- 1 - AB - Ab - aB
F_AB_AB <- F_AB_Ab <- F_AB_aB <- F_AB_ab <- F_Ab_AB <- F_Ab_Ab <- F_Ab_aB <- F_Ab_ab <- F_aB_AB <- F_aB_Ab <- F_aB_aB <- F_aB_ab <- F_ab_AB <- F_ab_Ab <- F_ab_aB <- F_ab_ab <- 1
r <- .5
AB <- .25
Ab <- .25
aB <- .25
ab = 1 - AB - Ab - aB
F_AB_AB = 1
F_AB_Ab = 1
F_AB_aB = 1
F_AB_ab = 1
F_Ab_AB = 1
F_Ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_Ab_aB = 1
F_Ab_ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_aB_AB = 1
F_aB_Ab = 1
F_aB_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_aB_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_AB = 1
F_ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_ab_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
W <- sum(AB * AB * F_AB_AB, AB * Ab * F_AB_Ab,
AB * aB * F_AB_aB, AB * ab * F_AB_ab,
Ab * AB * F_Ab_AB, Ab * Ab * F_Ab_Ab,
Ab * aB * F_Ab_aB, Ab * ab * F_Ab_ab,
aB * AB * F_aB_AB, aB * Ab * F_aB_Ab,
aB * aB * F_aB_aB, aB * ab * F_aB_ab,
ab * AB * F_ab_AB, ab * Ab * F_ab_Ab,
ab * aB * F_ab_aB, ab * ab * F_ab_ab)
fAB = AB*(F_AB_AB) + Ab*(F_AB_Ab) + aB*(F_AB_aB) + ab*(F_AB_ab)
fAb = AB*(F_Ab_AB) + Ab*(F_Ab_Ab) + aB*(F_Ab_aB) + ab*(F_Ab_ab)
faB = AB*(F_aB_AB) + Ab*(F_aB_Ab) + aB*(F_aB_aB) + ab*(F_aB_ab)
fab = AB*(F_ab_AB) + Ab*(F_ab_Ab) + aB*(F_ab_aB) + ab*(F_ab_ab)
AB = (AB*fAB - r*D*F_AB_ab)/W
D = (AB*ab - Ab*aB)
#Frequency of gametes in the next generation
AB = (AB*fAB - r*D*F_AB_ab)/W
Ab = (Ab*fAb + r*D*F_AB_ab)/W
aB = (aB*faB + r*D*F_AB_ab)/W
ab = (ab*fab - r*D*F_AB_ab)/W
#Frequency of A allele
pA = AB + Ab
#Frequency of B allele
pB = AB + aB
Evolve <- function( r, v, t, AB, Ab, aB, gen){
plot.valA <- plot.valB <- plot.valAB <- vector()
# this loop goes through the generations
for(i in 1:gen){
#obtaining frequency of 'ab' gamete
ab = 1 - AB - Ab - aB
#genotype frequencies
#     G_ABAB = AB*AB
#     G_ABAb = AB*Ab
#     G_ABaB = AB*aB
#     G_ABab = AB*ab
#     G_AbAB = Ab*AB
#     G_AbAb = Ab*Ab
#     G_AbaB = Ab*aB
#     G_Abab = Ab*ab
#     G_aBAB = aB*AB
#     G_aBAb = aB*Ab
#     G_aBaB = aB*aB
#     G_aBab = aB*ab
#     G_abAB = ab*AB
#     G_abAb = ab*Ab
#     G_abaB = ab*aB
#     G_abab = ab*ab
#Fitness values
F_AB_AB = 1
F_AB_Ab = 1
F_AB_aB = 1
F_AB_ab = 1
F_Ab_AB = 1
F_Ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_Ab_aB = 1
F_Ab_ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_aB_AB = 1
F_aB_Ab = 1
F_aB_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_aB_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_AB = 1
F_ab_Ab = 1 #(1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
F_ab_aB = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
F_ab_ab = 1 #(1-t)*(1/2)*G_ABaB + G_ABaB + G_AbaB + G_Abab + G_aBAB + G_aBAb + G_abAB + G_abAb
#+ (1-t)*(1/2)*G_abaB + G_abAB + G_aBab + G_aBAb + G_AbaB + G_AbAB + G_ABab + G_ABAb
#Average fitness of F_i_j
W <- sum(AB * AB * F_AB_AB, AB * Ab * F_AB_Ab,
AB * aB * F_AB_aB, AB * ab * F_AB_ab,
Ab * AB * F_Ab_AB, Ab * Ab * F_Ab_Ab,
Ab * aB * F_Ab_aB, Ab * ab * F_Ab_ab,
aB * AB * F_aB_AB, aB * Ab * F_aB_Ab,
aB * aB * F_aB_aB, aB * ab * F_aB_ab,
ab * AB * F_ab_AB, ab * Ab * F_ab_Ab,
ab * aB * F_ab_aB, ab * ab * F_ab_ab)
#Marginal fitness of haplotypes
fAB = AB*(F_AB_AB) + Ab*(F_AB_Ab) + aB*(F_AB_aB) + ab*(F_AB_ab)
fAb = AB*(F_Ab_AB) + Ab*(F_Ab_Ab) + aB*(F_Ab_aB) + ab*(F_Ab_ab)
faB = AB*(F_aB_AB) + Ab*(F_aB_Ab) + aB*(F_aB_aB) + ab*(F_aB_ab)
fab = AB*(F_ab_AB) + Ab*(F_ab_Ab) + aB*(F_ab_aB) + ab*(F_ab_ab)
#Linkage Disequilibrium
D = (AB*ab - Ab*aB)
#Frequency of gametes in the next generation
AB = (AB*fAB - r*D*F_AB_ab)/W
Ab = (Ab*fAb + r*D*F_AB_ab)/W
aB = (aB*faB + r*D*F_AB_ab)/W
ab = (ab*fab - r*D*F_AB_ab)/W
#Frequency of A allele
pA = AB + Ab
#Frequency of B allele
pB = AB + aB
plot.valA[i] <- pA
plot.valB[i] <- pB
plot.valAB[i] <- AB
}
results <- list()
results[[1]] <- plot.valA
results[[2]] <- plot.valB
results[[3]] <- plot.valAB
return(results)
}
foo <- Evolve(r = 0.5, t = 9, v = 9, AB = 0.1, Ab = 0.3, aB = 0.1, gen = 50)
plot(foo[[1]], type="l", lwd = 4, col="red", ylim = range(0:5), xlab="Generations", ylab="Freq. of alleles")
plot(foo[[1]], type="l", lwd = 4, col="red", ylim = range(0:5), xlab="Generations", ylab="Freq. of alleles")
lines(foo[[2]], type="l", lwd = 4, col ="green")
lines(foo[[3]], type="l", lwd = 4, col ="orange")
a = 5
5 = b
5 -> b
